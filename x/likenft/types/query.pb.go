// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/likenft/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	nft "github.com/likecoin/likechain/backport/cosmos-sdk/v0.46.0-alpha2/x/nft"
	types "github.com/likecoin/likechain/x/iscn/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryClassesByISCNRequest struct {
	IscnIdPrefix string             `protobuf:"bytes,1,opt,name=iscn_id_prefix,json=iscnIdPrefix,proto3" json:"iscn_id_prefix,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByISCNRequest) Reset()         { *m = QueryClassesByISCNRequest{} }
func (m *QueryClassesByISCNRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByISCNRequest) ProtoMessage()    {}
func (*QueryClassesByISCNRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{2}
}
func (m *QueryClassesByISCNRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByISCNRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByISCNRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByISCNRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByISCNRequest.Merge(m, src)
}
func (m *QueryClassesByISCNRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByISCNRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByISCNRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByISCNRequest proto.InternalMessageInfo

func (m *QueryClassesByISCNRequest) GetIscnIdPrefix() string {
	if m != nil {
		return m.IscnIdPrefix
	}
	return ""
}

func (m *QueryClassesByISCNRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryClassesByISCNResponse struct {
	IscnIdPrefix string              `protobuf:"bytes,1,opt,name=iscn_id_prefix,json=iscnIdPrefix,proto3" json:"iscn_id_prefix,omitempty"`
	Classes      []nft.Class         `protobuf:"bytes,2,rep,name=classes,proto3" json:"classes"`
	Pagination   *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByISCNResponse) Reset()         { *m = QueryClassesByISCNResponse{} }
func (m *QueryClassesByISCNResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByISCNResponse) ProtoMessage()    {}
func (*QueryClassesByISCNResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{3}
}
func (m *QueryClassesByISCNResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByISCNResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByISCNResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByISCNResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByISCNResponse.Merge(m, src)
}
func (m *QueryClassesByISCNResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByISCNResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByISCNResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByISCNResponse proto.InternalMessageInfo

func (m *QueryClassesByISCNResponse) GetIscnIdPrefix() string {
	if m != nil {
		return m.IscnIdPrefix
	}
	return ""
}

func (m *QueryClassesByISCNResponse) GetClasses() []nft.Class {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *QueryClassesByISCNResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryClassesByISCNIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByISCNIndexRequest) Reset()         { *m = QueryClassesByISCNIndexRequest{} }
func (m *QueryClassesByISCNIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByISCNIndexRequest) ProtoMessage()    {}
func (*QueryClassesByISCNIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{4}
}
func (m *QueryClassesByISCNIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByISCNIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByISCNIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByISCNIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByISCNIndexRequest.Merge(m, src)
}
func (m *QueryClassesByISCNIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByISCNIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByISCNIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByISCNIndexRequest proto.InternalMessageInfo

func (m *QueryClassesByISCNIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryClassesByISCNIndexResponse struct {
	ClassesByIscns []ClassesByISCN     `protobuf:"bytes,1,rep,name=classes_by_iscns,json=classesByIscns,proto3" json:"classes_by_iscns"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByISCNIndexResponse) Reset()         { *m = QueryClassesByISCNIndexResponse{} }
func (m *QueryClassesByISCNIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByISCNIndexResponse) ProtoMessage()    {}
func (*QueryClassesByISCNIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{5}
}
func (m *QueryClassesByISCNIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByISCNIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByISCNIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByISCNIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByISCNIndexResponse.Merge(m, src)
}
func (m *QueryClassesByISCNIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByISCNIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByISCNIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByISCNIndexResponse proto.InternalMessageInfo

func (m *QueryClassesByISCNIndexResponse) GetClassesByIscns() []ClassesByISCN {
	if m != nil {
		return m.ClassesByIscns
	}
	return nil
}

func (m *QueryClassesByISCNIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryISCNByClassRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryISCNByClassRequest) Reset()         { *m = QueryISCNByClassRequest{} }
func (m *QueryISCNByClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryISCNByClassRequest) ProtoMessage()    {}
func (*QueryISCNByClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{6}
}
func (m *QueryISCNByClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryISCNByClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryISCNByClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryISCNByClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryISCNByClassRequest.Merge(m, src)
}
func (m *QueryISCNByClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryISCNByClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryISCNByClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryISCNByClassRequest proto.InternalMessageInfo

func (m *QueryISCNByClassRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type QueryISCNByClassResponse struct {
	IscnIdPrefix  string                    `protobuf:"bytes,1,opt,name=iscn_id_prefix,json=iscnIdPrefix,proto3" json:"iscn_id_prefix,omitempty"`
	Owner         string                    `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	LatestVersion uint64                    `protobuf:"varint,3,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	LatestRecord  types.QueryResponseRecord `protobuf:"bytes,4,opt,name=latest_record,json=latestRecord,proto3" json:"latest_record"`
}

func (m *QueryISCNByClassResponse) Reset()         { *m = QueryISCNByClassResponse{} }
func (m *QueryISCNByClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryISCNByClassResponse) ProtoMessage()    {}
func (*QueryISCNByClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{7}
}
func (m *QueryISCNByClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryISCNByClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryISCNByClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryISCNByClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryISCNByClassResponse.Merge(m, src)
}
func (m *QueryISCNByClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryISCNByClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryISCNByClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryISCNByClassResponse proto.InternalMessageInfo

func (m *QueryISCNByClassResponse) GetIscnIdPrefix() string {
	if m != nil {
		return m.IscnIdPrefix
	}
	return ""
}

func (m *QueryISCNByClassResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryISCNByClassResponse) GetLatestVersion() uint64 {
	if m != nil {
		return m.LatestVersion
	}
	return 0
}

func (m *QueryISCNByClassResponse) GetLatestRecord() types.QueryResponseRecord {
	if m != nil {
		return m.LatestRecord
	}
	return types.QueryResponseRecord{}
}

type QueryClassesByAccountRequest struct {
	Account    string             `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByAccountRequest) Reset()         { *m = QueryClassesByAccountRequest{} }
func (m *QueryClassesByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByAccountRequest) ProtoMessage()    {}
func (*QueryClassesByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{8}
}
func (m *QueryClassesByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByAccountRequest.Merge(m, src)
}
func (m *QueryClassesByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByAccountRequest proto.InternalMessageInfo

func (m *QueryClassesByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryClassesByAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryClassesByAccountResponse struct {
	Account    string              `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Classes    []nft.Class         `protobuf:"bytes,2,rep,name=classes,proto3" json:"classes"`
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByAccountResponse) Reset()         { *m = QueryClassesByAccountResponse{} }
func (m *QueryClassesByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByAccountResponse) ProtoMessage()    {}
func (*QueryClassesByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{9}
}
func (m *QueryClassesByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByAccountResponse.Merge(m, src)
}
func (m *QueryClassesByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByAccountResponse proto.InternalMessageInfo

func (m *QueryClassesByAccountResponse) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QueryClassesByAccountResponse) GetClasses() []nft.Class {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *QueryClassesByAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryClassesByAccountIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByAccountIndexRequest) Reset()         { *m = QueryClassesByAccountIndexRequest{} }
func (m *QueryClassesByAccountIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByAccountIndexRequest) ProtoMessage()    {}
func (*QueryClassesByAccountIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{10}
}
func (m *QueryClassesByAccountIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByAccountIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByAccountIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByAccountIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByAccountIndexRequest.Merge(m, src)
}
func (m *QueryClassesByAccountIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByAccountIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByAccountIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByAccountIndexRequest proto.InternalMessageInfo

func (m *QueryClassesByAccountIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryClassesByAccountIndexResponse struct {
	ClassesByAccounts []ClassesByAccount  `protobuf:"bytes,1,rep,name=classes_by_accounts,json=classesByAccounts,proto3" json:"classes_by_accounts"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClassesByAccountIndexResponse) Reset()         { *m = QueryClassesByAccountIndexResponse{} }
func (m *QueryClassesByAccountIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClassesByAccountIndexResponse) ProtoMessage()    {}
func (*QueryClassesByAccountIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{11}
}
func (m *QueryClassesByAccountIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClassesByAccountIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClassesByAccountIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClassesByAccountIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClassesByAccountIndexResponse.Merge(m, src)
}
func (m *QueryClassesByAccountIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClassesByAccountIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClassesByAccountIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClassesByAccountIndexResponse proto.InternalMessageInfo

func (m *QueryClassesByAccountIndexResponse) GetClassesByAccounts() []ClassesByAccount {
	if m != nil {
		return m.ClassesByAccounts
	}
	return nil
}

func (m *QueryClassesByAccountIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAccountByClassRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryAccountByClassRequest) Reset()         { *m = QueryAccountByClassRequest{} }
func (m *QueryAccountByClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountByClassRequest) ProtoMessage()    {}
func (*QueryAccountByClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{12}
}
func (m *QueryAccountByClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountByClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountByClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountByClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountByClassRequest.Merge(m, src)
}
func (m *QueryAccountByClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountByClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountByClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountByClassRequest proto.InternalMessageInfo

func (m *QueryAccountByClassRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type QueryAccountByClassResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountByClassResponse) Reset()         { *m = QueryAccountByClassResponse{} }
func (m *QueryAccountByClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountByClassResponse) ProtoMessage()    {}
func (*QueryAccountByClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{13}
}
func (m *QueryAccountByClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountByClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountByClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountByClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountByClassResponse.Merge(m, src)
}
func (m *QueryAccountByClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountByClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountByClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountByClassResponse proto.InternalMessageInfo

func (m *QueryAccountByClassResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryBlindBoxContentRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryBlindBoxContentRequest) Reset()         { *m = QueryBlindBoxContentRequest{} }
func (m *QueryBlindBoxContentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlindBoxContentRequest) ProtoMessage()    {}
func (*QueryBlindBoxContentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{14}
}
func (m *QueryBlindBoxContentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlindBoxContentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlindBoxContentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlindBoxContentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlindBoxContentRequest.Merge(m, src)
}
func (m *QueryBlindBoxContentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlindBoxContentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlindBoxContentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlindBoxContentRequest proto.InternalMessageInfo

func (m *QueryBlindBoxContentRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryBlindBoxContentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryBlindBoxContentResponse struct {
	BlindBoxContent BlindBoxContent `protobuf:"bytes,1,opt,name=blind_box_content,json=blindBoxContent,proto3" json:"blind_box_content"`
}

func (m *QueryBlindBoxContentResponse) Reset()         { *m = QueryBlindBoxContentResponse{} }
func (m *QueryBlindBoxContentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlindBoxContentResponse) ProtoMessage()    {}
func (*QueryBlindBoxContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{15}
}
func (m *QueryBlindBoxContentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlindBoxContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlindBoxContentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlindBoxContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlindBoxContentResponse.Merge(m, src)
}
func (m *QueryBlindBoxContentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlindBoxContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlindBoxContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlindBoxContentResponse proto.InternalMessageInfo

func (m *QueryBlindBoxContentResponse) GetBlindBoxContent() BlindBoxContent {
	if m != nil {
		return m.BlindBoxContent
	}
	return BlindBoxContent{}
}

type QueryBlindBoxContentIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlindBoxContentIndexRequest) Reset()         { *m = QueryBlindBoxContentIndexRequest{} }
func (m *QueryBlindBoxContentIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlindBoxContentIndexRequest) ProtoMessage()    {}
func (*QueryBlindBoxContentIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{16}
}
func (m *QueryBlindBoxContentIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlindBoxContentIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlindBoxContentIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlindBoxContentIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlindBoxContentIndexRequest.Merge(m, src)
}
func (m *QueryBlindBoxContentIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlindBoxContentIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlindBoxContentIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlindBoxContentIndexRequest proto.InternalMessageInfo

func (m *QueryBlindBoxContentIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBlindBoxContentIndexResponse struct {
	BlindBoxContents []BlindBoxContent   `protobuf:"bytes,1,rep,name=blind_box_contents,json=blindBoxContents,proto3" json:"blind_box_contents"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlindBoxContentIndexResponse) Reset()         { *m = QueryBlindBoxContentIndexResponse{} }
func (m *QueryBlindBoxContentIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlindBoxContentIndexResponse) ProtoMessage()    {}
func (*QueryBlindBoxContentIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{17}
}
func (m *QueryBlindBoxContentIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlindBoxContentIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlindBoxContentIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlindBoxContentIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlindBoxContentIndexResponse.Merge(m, src)
}
func (m *QueryBlindBoxContentIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlindBoxContentIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlindBoxContentIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlindBoxContentIndexResponse proto.InternalMessageInfo

func (m *QueryBlindBoxContentIndexResponse) GetBlindBoxContents() []BlindBoxContent {
	if m != nil {
		return m.BlindBoxContents
	}
	return nil
}

func (m *QueryBlindBoxContentIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBlindBoxContentsRequest struct {
	ClassId    string             `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlindBoxContentsRequest) Reset()         { *m = QueryBlindBoxContentsRequest{} }
func (m *QueryBlindBoxContentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlindBoxContentsRequest) ProtoMessage()    {}
func (*QueryBlindBoxContentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{18}
}
func (m *QueryBlindBoxContentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlindBoxContentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlindBoxContentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlindBoxContentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlindBoxContentsRequest.Merge(m, src)
}
func (m *QueryBlindBoxContentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlindBoxContentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlindBoxContentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlindBoxContentsRequest proto.InternalMessageInfo

func (m *QueryBlindBoxContentsRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryBlindBoxContentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBlindBoxContentsResponse struct {
	BlindBoxContents []BlindBoxContent   `protobuf:"bytes,1,rep,name=blind_box_contents,json=blindBoxContents,proto3" json:"blind_box_contents"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBlindBoxContentsResponse) Reset()         { *m = QueryBlindBoxContentsResponse{} }
func (m *QueryBlindBoxContentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlindBoxContentsResponse) ProtoMessage()    {}
func (*QueryBlindBoxContentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{19}
}
func (m *QueryBlindBoxContentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlindBoxContentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlindBoxContentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlindBoxContentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlindBoxContentsResponse.Merge(m, src)
}
func (m *QueryBlindBoxContentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlindBoxContentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlindBoxContentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlindBoxContentsResponse proto.InternalMessageInfo

func (m *QueryBlindBoxContentsResponse) GetBlindBoxContents() []BlindBoxContent {
	if m != nil {
		return m.BlindBoxContents
	}
	return nil
}

func (m *QueryBlindBoxContentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOfferRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Buyer   string `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
}

func (m *QueryOfferRequest) Reset()         { *m = QueryOfferRequest{} }
func (m *QueryOfferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOfferRequest) ProtoMessage()    {}
func (*QueryOfferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{20}
}
func (m *QueryOfferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOfferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOfferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOfferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOfferRequest.Merge(m, src)
}
func (m *QueryOfferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOfferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOfferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOfferRequest proto.InternalMessageInfo

func (m *QueryOfferRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryOfferRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryOfferRequest) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

type QueryOfferResponse struct {
	Offer Offer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer"`
}

func (m *QueryOfferResponse) Reset()         { *m = QueryOfferResponse{} }
func (m *QueryOfferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOfferResponse) ProtoMessage()    {}
func (*QueryOfferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{21}
}
func (m *QueryOfferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOfferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOfferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOfferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOfferResponse.Merge(m, src)
}
func (m *QueryOfferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOfferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOfferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOfferResponse proto.InternalMessageInfo

func (m *QueryOfferResponse) GetOffer() Offer {
	if m != nil {
		return m.Offer
	}
	return Offer{}
}

type QueryOfferIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOfferIndexRequest) Reset()         { *m = QueryOfferIndexRequest{} }
func (m *QueryOfferIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOfferIndexRequest) ProtoMessage()    {}
func (*QueryOfferIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{22}
}
func (m *QueryOfferIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOfferIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOfferIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOfferIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOfferIndexRequest.Merge(m, src)
}
func (m *QueryOfferIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOfferIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOfferIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOfferIndexRequest proto.InternalMessageInfo

func (m *QueryOfferIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOfferIndexResponse struct {
	Offers     []Offer             `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOfferIndexResponse) Reset()         { *m = QueryOfferIndexResponse{} }
func (m *QueryOfferIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOfferIndexResponse) ProtoMessage()    {}
func (*QueryOfferIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{23}
}
func (m *QueryOfferIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOfferIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOfferIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOfferIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOfferIndexResponse.Merge(m, src)
}
func (m *QueryOfferIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOfferIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOfferIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOfferIndexResponse proto.InternalMessageInfo

func (m *QueryOfferIndexResponse) GetOffers() []Offer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *QueryOfferIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOffersByClassRequest struct {
	ClassId    string             `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOffersByClassRequest) Reset()         { *m = QueryOffersByClassRequest{} }
func (m *QueryOffersByClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOffersByClassRequest) ProtoMessage()    {}
func (*QueryOffersByClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{24}
}
func (m *QueryOffersByClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOffersByClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOffersByClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOffersByClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOffersByClassRequest.Merge(m, src)
}
func (m *QueryOffersByClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOffersByClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOffersByClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOffersByClassRequest proto.InternalMessageInfo

func (m *QueryOffersByClassRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryOffersByClassRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOffersByClassResponse struct {
	Offers     []Offer             `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOffersByClassResponse) Reset()         { *m = QueryOffersByClassResponse{} }
func (m *QueryOffersByClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOffersByClassResponse) ProtoMessage()    {}
func (*QueryOffersByClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{25}
}
func (m *QueryOffersByClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOffersByClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOffersByClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOffersByClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOffersByClassResponse.Merge(m, src)
}
func (m *QueryOffersByClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOffersByClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOffersByClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOffersByClassResponse proto.InternalMessageInfo

func (m *QueryOffersByClassResponse) GetOffers() []Offer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *QueryOffersByClassResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOffersByNFTRequest struct {
	ClassId    string             `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId      string             `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOffersByNFTRequest) Reset()         { *m = QueryOffersByNFTRequest{} }
func (m *QueryOffersByNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOffersByNFTRequest) ProtoMessage()    {}
func (*QueryOffersByNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{26}
}
func (m *QueryOffersByNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOffersByNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOffersByNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOffersByNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOffersByNFTRequest.Merge(m, src)
}
func (m *QueryOffersByNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOffersByNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOffersByNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOffersByNFTRequest proto.InternalMessageInfo

func (m *QueryOffersByNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryOffersByNFTRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryOffersByNFTRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryOffersByNFTResponse struct {
	Offers     []Offer             `protobuf:"bytes,1,rep,name=offers,proto3" json:"offers"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOffersByNFTResponse) Reset()         { *m = QueryOffersByNFTResponse{} }
func (m *QueryOffersByNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOffersByNFTResponse) ProtoMessage()    {}
func (*QueryOffersByNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{27}
}
func (m *QueryOffersByNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOffersByNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOffersByNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOffersByNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOffersByNFTResponse.Merge(m, src)
}
func (m *QueryOffersByNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOffersByNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOffersByNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOffersByNFTResponse proto.InternalMessageInfo

func (m *QueryOffersByNFTResponse) GetOffers() []Offer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *QueryOffersByNFTResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListingRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId   string `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Seller  string `protobuf:"bytes,3,opt,name=seller,proto3" json:"seller,omitempty"`
}

func (m *QueryListingRequest) Reset()         { *m = QueryListingRequest{} }
func (m *QueryListingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListingRequest) ProtoMessage()    {}
func (*QueryListingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{28}
}
func (m *QueryListingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingRequest.Merge(m, src)
}
func (m *QueryListingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingRequest proto.InternalMessageInfo

func (m *QueryListingRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryListingRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryListingRequest) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

type QueryListingResponse struct {
	Listing Listing `protobuf:"bytes,1,opt,name=listing,proto3" json:"listing"`
}

func (m *QueryListingResponse) Reset()         { *m = QueryListingResponse{} }
func (m *QueryListingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListingResponse) ProtoMessage()    {}
func (*QueryListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{29}
}
func (m *QueryListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingResponse.Merge(m, src)
}
func (m *QueryListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingResponse proto.InternalMessageInfo

func (m *QueryListingResponse) GetListing() Listing {
	if m != nil {
		return m.Listing
	}
	return Listing{}
}

type QueryListingIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListingIndexRequest) Reset()         { *m = QueryListingIndexRequest{} }
func (m *QueryListingIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListingIndexRequest) ProtoMessage()    {}
func (*QueryListingIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{30}
}
func (m *QueryListingIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingIndexRequest.Merge(m, src)
}
func (m *QueryListingIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingIndexRequest proto.InternalMessageInfo

func (m *QueryListingIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListingIndexResponse struct {
	Listings   []Listing           `protobuf:"bytes,1,rep,name=listings,proto3" json:"listings"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListingIndexResponse) Reset()         { *m = QueryListingIndexResponse{} }
func (m *QueryListingIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListingIndexResponse) ProtoMessage()    {}
func (*QueryListingIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{31}
}
func (m *QueryListingIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingIndexResponse.Merge(m, src)
}
func (m *QueryListingIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingIndexResponse proto.InternalMessageInfo

func (m *QueryListingIndexResponse) GetListings() []Listing {
	if m != nil {
		return m.Listings
	}
	return nil
}

func (m *QueryListingIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListingsByClassRequest struct {
	ClassId    string             `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListingsByClassRequest) Reset()         { *m = QueryListingsByClassRequest{} }
func (m *QueryListingsByClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListingsByClassRequest) ProtoMessage()    {}
func (*QueryListingsByClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{32}
}
func (m *QueryListingsByClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingsByClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingsByClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingsByClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingsByClassRequest.Merge(m, src)
}
func (m *QueryListingsByClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingsByClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingsByClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingsByClassRequest proto.InternalMessageInfo

func (m *QueryListingsByClassRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryListingsByClassRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListingsByClassResponse struct {
	Listings   []Listing           `protobuf:"bytes,1,rep,name=listings,proto3" json:"listings"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListingsByClassResponse) Reset()         { *m = QueryListingsByClassResponse{} }
func (m *QueryListingsByClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListingsByClassResponse) ProtoMessage()    {}
func (*QueryListingsByClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{33}
}
func (m *QueryListingsByClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingsByClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingsByClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingsByClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingsByClassResponse.Merge(m, src)
}
func (m *QueryListingsByClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingsByClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingsByClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingsByClassResponse proto.InternalMessageInfo

func (m *QueryListingsByClassResponse) GetListings() []Listing {
	if m != nil {
		return m.Listings
	}
	return nil
}

func (m *QueryListingsByClassResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListingsByNFTRequest struct {
	ClassId    string             `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId      string             `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListingsByNFTRequest) Reset()         { *m = QueryListingsByNFTRequest{} }
func (m *QueryListingsByNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListingsByNFTRequest) ProtoMessage()    {}
func (*QueryListingsByNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{34}
}
func (m *QueryListingsByNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingsByNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingsByNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingsByNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingsByNFTRequest.Merge(m, src)
}
func (m *QueryListingsByNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingsByNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingsByNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingsByNFTRequest proto.InternalMessageInfo

func (m *QueryListingsByNFTRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryListingsByNFTRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryListingsByNFTRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListingsByNFTResponse struct {
	Listings   []Listing           `protobuf:"bytes,1,rep,name=listings,proto3" json:"listings"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListingsByNFTResponse) Reset()         { *m = QueryListingsByNFTResponse{} }
func (m *QueryListingsByNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListingsByNFTResponse) ProtoMessage()    {}
func (*QueryListingsByNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{35}
}
func (m *QueryListingsByNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListingsByNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListingsByNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListingsByNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListingsByNFTResponse.Merge(m, src)
}
func (m *QueryListingsByNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListingsByNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListingsByNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListingsByNFTResponse proto.InternalMessageInfo

func (m *QueryListingsByNFTResponse) GetListings() []Listing {
	if m != nil {
		return m.Listings
	}
	return nil
}

func (m *QueryListingsByNFTResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRoyaltyConfigRequest struct {
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *QueryRoyaltyConfigRequest) Reset()         { *m = QueryRoyaltyConfigRequest{} }
func (m *QueryRoyaltyConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRoyaltyConfigRequest) ProtoMessage()    {}
func (*QueryRoyaltyConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{36}
}
func (m *QueryRoyaltyConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoyaltyConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoyaltyConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoyaltyConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoyaltyConfigRequest.Merge(m, src)
}
func (m *QueryRoyaltyConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoyaltyConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoyaltyConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoyaltyConfigRequest proto.InternalMessageInfo

func (m *QueryRoyaltyConfigRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

type QueryRoyaltyConfigResponse struct {
	RoyaltyConfig RoyaltyConfig `protobuf:"bytes,1,opt,name=royalty_config,json=royaltyConfig,proto3" json:"royalty_config"`
}

func (m *QueryRoyaltyConfigResponse) Reset()         { *m = QueryRoyaltyConfigResponse{} }
func (m *QueryRoyaltyConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRoyaltyConfigResponse) ProtoMessage()    {}
func (*QueryRoyaltyConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{37}
}
func (m *QueryRoyaltyConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoyaltyConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoyaltyConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoyaltyConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoyaltyConfigResponse.Merge(m, src)
}
func (m *QueryRoyaltyConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoyaltyConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoyaltyConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoyaltyConfigResponse proto.InternalMessageInfo

func (m *QueryRoyaltyConfigResponse) GetRoyaltyConfig() RoyaltyConfig {
	if m != nil {
		return m.RoyaltyConfig
	}
	return RoyaltyConfig{}
}

type QueryRoyaltyConfigIndexRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRoyaltyConfigIndexRequest) Reset()         { *m = QueryRoyaltyConfigIndexRequest{} }
func (m *QueryRoyaltyConfigIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRoyaltyConfigIndexRequest) ProtoMessage()    {}
func (*QueryRoyaltyConfigIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{38}
}
func (m *QueryRoyaltyConfigIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoyaltyConfigIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoyaltyConfigIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoyaltyConfigIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoyaltyConfigIndexRequest.Merge(m, src)
}
func (m *QueryRoyaltyConfigIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoyaltyConfigIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoyaltyConfigIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoyaltyConfigIndexRequest proto.InternalMessageInfo

func (m *QueryRoyaltyConfigIndexRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRoyaltyConfigIndexResponse struct {
	RoyaltyConfigByClass []RoyaltyConfigByClass `protobuf:"bytes,1,rep,name=royalty_config_by_class,json=royaltyConfigByClass,proto3" json:"royalty_config_by_class"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRoyaltyConfigIndexResponse) Reset()         { *m = QueryRoyaltyConfigIndexResponse{} }
func (m *QueryRoyaltyConfigIndexResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRoyaltyConfigIndexResponse) ProtoMessage()    {}
func (*QueryRoyaltyConfigIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4194bde3aaf7287f, []int{39}
}
func (m *QueryRoyaltyConfigIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoyaltyConfigIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoyaltyConfigIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoyaltyConfigIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoyaltyConfigIndexResponse.Merge(m, src)
}
func (m *QueryRoyaltyConfigIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoyaltyConfigIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoyaltyConfigIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoyaltyConfigIndexResponse proto.InternalMessageInfo

func (m *QueryRoyaltyConfigIndexResponse) GetRoyaltyConfigByClass() []RoyaltyConfigByClass {
	if m != nil {
		return m.RoyaltyConfigByClass
	}
	return nil
}

func (m *QueryRoyaltyConfigIndexResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "likechain.likenft.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "likechain.likenft.QueryParamsResponse")
	proto.RegisterType((*QueryClassesByISCNRequest)(nil), "likechain.likenft.QueryClassesByISCNRequest")
	proto.RegisterType((*QueryClassesByISCNResponse)(nil), "likechain.likenft.QueryClassesByISCNResponse")
	proto.RegisterType((*QueryClassesByISCNIndexRequest)(nil), "likechain.likenft.QueryClassesByISCNIndexRequest")
	proto.RegisterType((*QueryClassesByISCNIndexResponse)(nil), "likechain.likenft.QueryClassesByISCNIndexResponse")
	proto.RegisterType((*QueryISCNByClassRequest)(nil), "likechain.likenft.QueryISCNByClassRequest")
	proto.RegisterType((*QueryISCNByClassResponse)(nil), "likechain.likenft.QueryISCNByClassResponse")
	proto.RegisterType((*QueryClassesByAccountRequest)(nil), "likechain.likenft.QueryClassesByAccountRequest")
	proto.RegisterType((*QueryClassesByAccountResponse)(nil), "likechain.likenft.QueryClassesByAccountResponse")
	proto.RegisterType((*QueryClassesByAccountIndexRequest)(nil), "likechain.likenft.QueryClassesByAccountIndexRequest")
	proto.RegisterType((*QueryClassesByAccountIndexResponse)(nil), "likechain.likenft.QueryClassesByAccountIndexResponse")
	proto.RegisterType((*QueryAccountByClassRequest)(nil), "likechain.likenft.QueryAccountByClassRequest")
	proto.RegisterType((*QueryAccountByClassResponse)(nil), "likechain.likenft.QueryAccountByClassResponse")
	proto.RegisterType((*QueryBlindBoxContentRequest)(nil), "likechain.likenft.QueryBlindBoxContentRequest")
	proto.RegisterType((*QueryBlindBoxContentResponse)(nil), "likechain.likenft.QueryBlindBoxContentResponse")
	proto.RegisterType((*QueryBlindBoxContentIndexRequest)(nil), "likechain.likenft.QueryBlindBoxContentIndexRequest")
	proto.RegisterType((*QueryBlindBoxContentIndexResponse)(nil), "likechain.likenft.QueryBlindBoxContentIndexResponse")
	proto.RegisterType((*QueryBlindBoxContentsRequest)(nil), "likechain.likenft.QueryBlindBoxContentsRequest")
	proto.RegisterType((*QueryBlindBoxContentsResponse)(nil), "likechain.likenft.QueryBlindBoxContentsResponse")
	proto.RegisterType((*QueryOfferRequest)(nil), "likechain.likenft.QueryOfferRequest")
	proto.RegisterType((*QueryOfferResponse)(nil), "likechain.likenft.QueryOfferResponse")
	proto.RegisterType((*QueryOfferIndexRequest)(nil), "likechain.likenft.QueryOfferIndexRequest")
	proto.RegisterType((*QueryOfferIndexResponse)(nil), "likechain.likenft.QueryOfferIndexResponse")
	proto.RegisterType((*QueryOffersByClassRequest)(nil), "likechain.likenft.QueryOffersByClassRequest")
	proto.RegisterType((*QueryOffersByClassResponse)(nil), "likechain.likenft.QueryOffersByClassResponse")
	proto.RegisterType((*QueryOffersByNFTRequest)(nil), "likechain.likenft.QueryOffersByNFTRequest")
	proto.RegisterType((*QueryOffersByNFTResponse)(nil), "likechain.likenft.QueryOffersByNFTResponse")
	proto.RegisterType((*QueryListingRequest)(nil), "likechain.likenft.QueryListingRequest")
	proto.RegisterType((*QueryListingResponse)(nil), "likechain.likenft.QueryListingResponse")
	proto.RegisterType((*QueryListingIndexRequest)(nil), "likechain.likenft.QueryListingIndexRequest")
	proto.RegisterType((*QueryListingIndexResponse)(nil), "likechain.likenft.QueryListingIndexResponse")
	proto.RegisterType((*QueryListingsByClassRequest)(nil), "likechain.likenft.QueryListingsByClassRequest")
	proto.RegisterType((*QueryListingsByClassResponse)(nil), "likechain.likenft.QueryListingsByClassResponse")
	proto.RegisterType((*QueryListingsByNFTRequest)(nil), "likechain.likenft.QueryListingsByNFTRequest")
	proto.RegisterType((*QueryListingsByNFTResponse)(nil), "likechain.likenft.QueryListingsByNFTResponse")
	proto.RegisterType((*QueryRoyaltyConfigRequest)(nil), "likechain.likenft.QueryRoyaltyConfigRequest")
	proto.RegisterType((*QueryRoyaltyConfigResponse)(nil), "likechain.likenft.QueryRoyaltyConfigResponse")
	proto.RegisterType((*QueryRoyaltyConfigIndexRequest)(nil), "likechain.likenft.QueryRoyaltyConfigIndexRequest")
	proto.RegisterType((*QueryRoyaltyConfigIndexResponse)(nil), "likechain.likenft.QueryRoyaltyConfigIndexResponse")
}

func init() { proto.RegisterFile("likechain/likenft/query.proto", fileDescriptor_4194bde3aaf7287f) }

var fileDescriptor_4194bde3aaf7287f = []byte{
	// 1769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xdd, 0x6f, 0x1b, 0xc5,
	0x16, 0xcf, 0xa4, 0x4d, 0xd2, 0x9e, 0x36, 0x5f, 0xd3, 0xb4, 0x71, 0xb6, 0xad, 0x93, 0x6e, 0xbe,
	0x6e, 0xd3, 0xc4, 0x7b, 0x93, 0xa6, 0xad, 0xee, 0xd5, 0x7d, 0xb9, 0x89, 0xd4, 0x12, 0x04, 0x21,
	0x98, 0xaa, 0x12, 0xf0, 0x60, 0xd6, 0xf6, 0xda, 0x5d, 0xea, 0xec, 0xba, 0xde, 0x4d, 0x89, 0x15,
	0x05, 0x15, 0x78, 0x81, 0x27, 0x3e, 0x2a, 0x04, 0x2a, 0x54, 0x48, 0x40, 0x91, 0xf8, 0x1f, 0x40,
	0xe2, 0x01, 0xa1, 0xbe, 0x20, 0x55, 0xe2, 0x85, 0x27, 0x84, 0x5a, 0xfe, 0x04, 0xfe, 0x00, 0xb4,
	0xb3, 0x67, 0x9d, 0x9d, 0xdd, 0x19, 0x7b, 0x13, 0x39, 0x22, 0xbc, 0x79, 0x67, 0xce, 0x99, 0xf3,
	0x3b, 0xbf, 0x73, 0xe6, 0xe3, 0x9c, 0x04, 0xce, 0x56, 0xcc, 0x5b, 0x46, 0xe1, 0xa6, 0x6e, 0x5a,
	0x9a, 0xf7, 0xcb, 0x2a, 0xb9, 0xda, 0xed, 0x0d, 0xa3, 0x56, 0xcf, 0x54, 0x6b, 0xb6, 0x6b, 0xd3,
	0xc1, 0xc6, 0x74, 0x06, 0xa7, 0x95, 0x99, 0x82, 0xed, 0xac, 0xdb, 0x8e, 0x96, 0xd7, 0x1d, 0xc3,
	0x97, 0xd5, 0xee, 0xcc, 0xe7, 0x0d, 0x57, 0x9f, 0xd7, 0xaa, 0x7a, 0xd9, 0xb4, 0x74, 0xd7, 0xb4,
	0x2d, 0x5f, 0x5d, 0x39, 0x83, 0xb2, 0xde, 0xb2, 0x81, 0x90, 0x55, 0x72, 0x71, 0x76, 0xa8, 0x6c,
	0x97, 0x6d, 0xf6, 0x53, 0xf3, 0x7e, 0x05, 0x3a, 0x65, 0xdb, 0x2e, 0x57, 0x0c, 0x4d, 0xaf, 0x9a,
	0x9a, 0x6e, 0x59, 0xb6, 0xcb, 0x16, 0x74, 0x70, 0x56, 0xd9, 0xc1, 0x6b, 0x3a, 0x05, 0x2b, 0x0c,
	0x56, 0x99, 0x89, 0xfb, 0x52, 0xa8, 0xe8, 0x8e, 0x63, 0x38, 0xb9, 0x7c, 0x3d, 0xa7, 0x17, 0x0a,
	0xf6, 0x86, 0x15, 0xd8, 0x9e, 0x6e, 0x2a, 0xeb, 0x2d, 0x8d, 0x82, 0xa3, 0x71, 0xc1, 0x8a, 0xe9,
	0xb8, 0xa6, 0x55, 0x46, 0x81, 0x89, 0xb8, 0xc0, 0xba, 0x69, 0xb9, 0x7a, 0xbe, 0x62, 0xe4, 0x76,
	0x7c, 0x15, 0xf0, 0x6c, 0x97, 0x4a, 0x46, 0x0d, 0xa7, 0xd3, 0xf1, 0xe9, 0xaa, 0x5e, 0xd3, 0xd7,
	0x03, 0xb7, 0xa7, 0xe2, 0xf3, 0x35, 0xbb, 0xae, 0x57, 0xdc, 0x7a, 0xae, 0x60, 0x5b, 0x25, 0x13,
	0xc1, 0xa8, 0x43, 0x40, 0x5f, 0xf4, 0x18, 0x59, 0x63, 0xca, 0x59, 0xe3, 0xf6, 0x86, 0xe1, 0xb8,
	0xea, 0x2a, 0x9c, 0xe0, 0x46, 0x9d, 0xaa, 0x6d, 0x39, 0x06, 0xbd, 0x02, 0xdd, 0xbe, 0x91, 0x14,
	0x19, 0x23, 0xff, 0x3a, 0xb6, 0x30, 0x92, 0x89, 0x45, 0x3b, 0xe3, 0xab, 0x2c, 0x1d, 0x7e, 0xf4,
	0xdb, 0x68, 0x47, 0x16, 0xc5, 0xd5, 0xf7, 0x08, 0x8c, 0xb0, 0x05, 0x97, 0x7d, 0xca, 0x96, 0xea,
	0x2b, 0x2f, 0x2d, 0xaf, 0xa2, 0x35, 0x3a, 0x01, 0x7d, 0x1e, 0x7f, 0x39, 0xb3, 0x98, 0xab, 0xd6,
	0x8c, 0x92, 0xb9, 0xc9, 0x96, 0x3f, 0x9a, 0x3d, 0xee, 0x8d, 0xae, 0x14, 0xd7, 0xd8, 0x18, 0xbd,
	0x0a, 0xb0, 0x93, 0x2e, 0xa9, 0x4e, 0x06, 0x60, 0x2a, 0xe3, 0xe7, 0x4b, 0xc6, 0xcb, 0xad, 0x8c,
	0x1f, 0x5a, 0x4c, 0x9b, 0xcc, 0x9a, 0x5e, 0x36, 0xd0, 0x42, 0x36, 0xa4, 0xa9, 0xfe, 0x44, 0x40,
	0x11, 0x61, 0x41, 0x1f, 0x93, 0x81, 0xf9, 0x0f, 0xf4, 0x60, 0xf4, 0x53, 0x9d, 0x63, 0x87, 0x18,
	0x15, 0x88, 0xc4, 0xe3, 0x20, 0x80, 0xc0, 0x2c, 0x20, 0x15, 0x81, 0x3c, 0xbd, 0xc6, 0xf9, 0x71,
	0x88, 0xf9, 0x31, 0xdd, 0xd2, 0x0f, 0x1f, 0x1d, 0xe7, 0xc8, 0x4d, 0x48, 0xc7, 0xfd, 0x58, 0xb1,
	0x8a, 0xc6, 0x66, 0x40, 0x2c, 0x4f, 0x19, 0xd9, 0x33, 0x65, 0xdf, 0x11, 0x18, 0x95, 0x9a, 0x42,
	0xde, 0xd6, 0x60, 0x20, 0xb2, 0x1f, 0xbc, 0x2c, 0xf1, 0xa8, 0x19, 0x13, 0x64, 0x09, 0xb7, 0x10,
	0x32, 0xd4, 0x57, 0x68, 0x0c, 0x7a, 0xda, 0x11, 0xa2, 0x3a, 0xf7, 0x4e, 0xd4, 0x22, 0x0c, 0x33,
	0xf4, 0xcc, 0x96, 0xef, 0x43, 0xc0, 0xd0, 0x08, 0x1c, 0x61, 0x56, 0x73, 0x66, 0x11, 0xe3, 0xec,
	0xc7, 0x69, 0xa5, 0xa8, 0xfe, 0x4c, 0x20, 0x15, 0x57, 0xdb, 0x55, 0x96, 0x0c, 0x41, 0x97, 0xfd,
	0x86, 0x65, 0xd4, 0x18, 0xf8, 0xa3, 0x59, 0xff, 0x83, 0x4e, 0x42, 0x5f, 0x45, 0x77, 0x0d, 0xc7,
	0xcd, 0xdd, 0x31, 0x6a, 0x4e, 0x90, 0x04, 0x87, 0xb3, 0xbd, 0xfe, 0xe8, 0x0d, 0x7f, 0x90, 0xae,
	0x02, 0x0e, 0xe4, 0x6a, 0x46, 0xc1, 0xae, 0x15, 0x53, 0x87, 0x19, 0x03, 0xe3, 0x21, 0x36, 0xd9,
	0xa9, 0xc3, 0x30, 0x36, 0xfc, 0x66, 0xa2, 0x48, 0xe8, 0x71, 0x5f, 0xdf, 0x1f, 0x53, 0xef, 0x12,
	0x38, 0xc3, 0x07, 0xf1, 0xff, 0xfe, 0x01, 0x17, 0x70, 0x91, 0x82, 0x1e, 0x3c, 0xf2, 0x02, 0x2a,
	0xf0, 0xb3, 0x6d, 0x5b, 0xef, 0x7b, 0x02, 0x67, 0x25, 0x10, 0x90, 0x57, 0x39, 0x86, 0x83, 0xb0,
	0xe3, 0x6e, 0xc1, 0x39, 0x21, 0xfc, 0x7d, 0xd9, 0x74, 0x8f, 0x08, 0xa8, 0xcd, 0xac, 0x21, 0x63,
	0x2f, 0xc3, 0x89, 0xf8, 0x9d, 0x15, 0x6c, 0xbd, 0xf1, 0x66, 0x5b, 0x0f, 0x97, 0x43, 0xb6, 0x06,
	0x0b, 0x91, 0xf1, 0x36, 0x6e, 0xc0, 0x2b, 0x78, 0xe2, 0x06, 0x16, 0x13, 0xef, 0xc1, 0x2b, 0x70,
	0x5a, 0xa8, 0x18, 0xca, 0x96, 0x62, 0xb1, 0x66, 0x38, 0x4e, 0x23, 0x5b, 0xfc, 0x4f, 0xf5, 0x19,
	0x54, 0x5c, 0xaa, 0x98, 0x56, 0x71, 0xc9, 0xde, 0x5c, 0xb6, 0x2d, 0xd7, 0xd8, 0x49, 0x75, 0xb9,
	0x49, 0xda, 0x07, 0x9d, 0x66, 0x11, 0x37, 0x6c, 0xa7, 0x59, 0x54, 0x5d, 0xdc, 0x35, 0xb1, 0x95,
	0x10, 0xc3, 0x75, 0x18, 0xcc, 0x7b, 0x53, 0xb9, 0xbc, 0xbd, 0xe9, 0x5d, 0xad, 0xde, 0x24, 0x46,
	0x5d, 0x15, 0xb0, 0x1f, 0x59, 0x06, 0xc9, 0xef, 0xcf, 0xf3, 0xc3, 0xea, 0xeb, 0x30, 0x26, 0xb2,
	0xba, 0x2f, 0x89, 0xf6, 0x23, 0xc1, 0xb4, 0x16, 0x1b, 0x43, 0x3f, 0x6f, 0x00, 0x8d, 0xf9, 0x19,
	0xa4, 0x59, 0x72, 0x47, 0x07, 0x22, 0x8e, 0xb6, 0x31, 0xc9, 0xde, 0x22, 0xe2, 0x48, 0x25, 0xc8,
	0xb3, 0xb6, 0x1d, 0x70, 0x3f, 0x04, 0x07, 0x5c, 0x1c, 0xc3, 0x3f, 0x85, 0xc6, 0x57, 0x61, 0x90,
	0x79, 0xf0, 0x82, 0xf7, 0xd8, 0x4c, 0x40, 0xdd, 0x49, 0xe8, 0xb6, 0x4a, 0x6e, 0xae, 0xb1, 0x67,
	0xba, 0xac, 0x92, 0xbb, 0x52, 0xf4, 0xae, 0xbe, 0xfc, 0x46, 0xdd, 0xa8, 0xb1, 0xe3, 0xf6, 0x68,
	0xd6, 0xff, 0x50, 0x9f, 0xc5, 0xd7, 0x26, 0x2e, 0x8e, 0x9c, 0x2c, 0x42, 0x17, 0x7b, 0xda, 0x62,
	0x0e, 0xa7, 0x04, 0x34, 0x30, 0x05, 0x74, 0xde, 0x17, 0x56, 0x5f, 0x83, 0x53, 0x3b, 0x6b, 0xed,
	0xcb, 0xc6, 0xb8, 0x4f, 0xf0, 0xe1, 0x10, 0x36, 0x81, 0x98, 0x2f, 0x43, 0x37, 0x83, 0x11, 0xc4,
	0xae, 0x15, 0x68, 0x94, 0x6e, 0x5f, 0x9c, 0xde, 0xc4, 0x17, 0x35, 0x33, 0xe2, 0x24, 0x3e, 0x52,
	0xdb, 0x96, 0xea, 0x0f, 0x82, 0x67, 0x74, 0x04, 0xc0, 0x41, 0xe1, 0xe7, 0x1e, 0x17, 0x3c, 0x67,
	0xa9, 0xbe, 0x7a, 0xf5, 0xfa, 0xde, 0xd3, 0xf9, 0xaa, 0xe0, 0x09, 0xb1, 0x17, 0xd6, 0x3e, 0x0b,
	0x1e, 0x95, 0x1c, 0xaa, 0x83, 0xc2, 0x59, 0x0e, 0xcb, 0xbe, 0xe7, 0xfc, 0x7a, 0x75, 0xef, 0x74,
	0x9d, 0x82, 0x6e, 0xc7, 0xa8, 0x54, 0x1a, 0xdb, 0x1f, 0xbf, 0xd4, 0x2c, 0x0c, 0xf1, 0x06, 0xd0,
	0xf3, 0xff, 0x42, 0x0f, 0xd6, 0xc8, 0xb8, 0x5d, 0x15, 0x81, 0xeb, 0xa8, 0x14, 0xbc, 0xee, 0x50,
	0x41, 0xcd, 0x23, 0xa3, 0x38, 0xbd, 0x2f, 0x27, 0xc1, 0x97, 0x41, 0xfd, 0xca, 0x1b, 0x41, 0xf4,
	0xff, 0x83, 0x23, 0x08, 0x26, 0x88, 0x5c, 0x6b, 0xf8, 0x0d, 0x8d, 0xf6, 0x45, 0xef, 0x2e, 0xc1,
	0x47, 0x0f, 0x5a, 0xfa, 0x1b, 0x0e, 0x85, 0x87, 0xc1, 0x1d, 0x1c, 0x83, 0x70, 0xb0, 0xa8, 0xfa,
	0x38, 0x12, 0xcf, 0x83, 0x72, 0x3c, 0x7c, 0x15, 0x1c, 0xaa, 0x11, 0x5c, 0x07, 0x8b, 0xbd, 0xcb,
	0x48, 0x5e, 0xd6, 0x6f, 0x28, 0x2d, 0xb3, 0x7e, 0x52, 0x82, 0xd7, 0xfc, 0x2d, 0x74, 0x2e, 0xa2,
	0x87, 0xce, 0x3d, 0x0f, 0x7d, 0x7c, 0x87, 0x0a, 0xf7, 0xab, 0xa8, 0x7d, 0xc0, 0xad, 0x80, 0x8e,
	0xf6, 0xd6, 0xc2, 0x83, 0x8d, 0xee, 0x08, 0x27, 0xba, 0x2f, 0x87, 0xc3, 0xe3, 0xa0, 0x3b, 0x22,
	0x32, 0x85, 0xce, 0x15, 0x61, 0x98, 0x77, 0xce, 0x2b, 0xd6, 0x18, 0x2f, 0x18, 0xc8, 0xe9, 0x96,
	0x5e, 0xd6, 0xc3, 0xb5, 0xed, 0x50, 0x4d, 0x30, 0xd7, 0xb6, 0x08, 0x2f, 0xfc, 0x39, 0x0c, 0x5d,
	0xcc, 0x25, 0x5a, 0x85, 0x6e, 0xbf, 0xa3, 0x47, 0x27, 0x05, 0x08, 0xe3, 0xad, 0x43, 0x65, 0xaa,
	0x95, 0x98, 0x6f, 0x4e, 0x1d, 0x7e, 0xfb, 0x97, 0x3f, 0xee, 0x75, 0x0e, 0xd2, 0xfe, 0x48, 0xff,
	0x92, 0x7e, 0x41, 0xa0, 0x97, 0x6b, 0x0f, 0xd1, 0x59, 0xd9, 0x92, 0xa2, 0x6e, 0xa2, 0x32, 0x97,
	0x50, 0x1a, 0x71, 0xcc, 0x33, 0x1c, 0x17, 0xe8, 0x79, 0x59, 0x5b, 0x57, 0xdb, 0xe2, 0x3b, 0x3d,
	0xdb, 0xf4, 0x01, 0x01, 0x1a, 0xef, 0x84, 0xd1, 0xf9, 0x44, 0x86, 0xc3, 0x29, 0xa8, 0x2c, 0xec,
	0x46, 0x05, 0x01, 0x8f, 0x31, 0xc0, 0x0a, 0x4d, 0xc9, 0x00, 0xd3, 0x0f, 0x09, 0x1c, 0x0b, 0x35,
	0xad, 0xe8, 0x8c, 0xcc, 0x4a, 0xbc, 0x21, 0xa6, 0x5c, 0x48, 0x24, 0x8b, 0x50, 0xce, 0x33, 0x28,
	0xe3, 0xf4, 0x5c, 0x03, 0x0a, 0xa3, 0x2a, 0x48, 0x6d, 0x6d, 0x2b, 0x38, 0x09, 0xb6, 0xe9, 0xd7,
	0x04, 0x06, 0xa2, 0x9d, 0x07, 0xaa, 0xb5, 0x74, 0x9f, 0x6f, 0x51, 0x29, 0xff, 0x4e, 0xae, 0x80,
	0x10, 0xe7, 0x18, 0xc4, 0x69, 0x3a, 0xd9, 0xa4, 0xc3, 0xaf, 0x6d, 0xe1, 0x8f, 0x6d, 0xfa, 0x2d,
	0x81, 0x93, 0xc2, 0x7e, 0x0b, 0x5d, 0x4c, 0x6a, 0x9a, 0x0b, 0xf0, 0xa5, 0x5d, 0x6a, 0x21, 0xea,
	0x71, 0x86, 0xfa, 0x2c, 0x3d, 0xdd, 0x04, 0xb5, 0x97, 0x86, 0x7d, 0x7c, 0x63, 0x84, 0x4a, 0x73,
	0x5f, 0xd8, 0x79, 0x51, 0x32, 0x49, 0xc5, 0x11, 0xd6, 0x2c, 0x83, 0x35, 0x45, 0x27, 0x1a, 0xb0,
	0x10, 0x8b, 0x30, 0xe4, 0xdf, 0x10, 0xe8, 0x8f, 0x94, 0xaf, 0x54, 0x6a, 0x51, 0xdc, 0xa8, 0x51,
	0xb4, 0xc4, 0xf2, 0x08, 0x71, 0x81, 0x41, 0x9c, 0xa5, 0x33, 0x0d, 0x88, 0xb1, 0x72, 0x3b, 0x84,
	0x51, 0xdb, 0xf2, 0x80, 0x3e, 0x24, 0x30, 0x24, 0xea, 0x7d, 0xd0, 0x8b, 0x09, 0xad, 0x73, 0x21,
	0x5f, 0xdc, 0x9d, 0x12, 0xe2, 0x56, 0x19, 0xee, 0x33, 0x54, 0x91, 0xe3, 0x66, 0x7b, 0x28, 0xda,
	0x58, 0xa0, 0x49, 0x19, 0x72, 0x5a, 0xee, 0x21, 0x59, 0xcf, 0x42, 0xb0, 0x87, 0x9a, 0x71, 0x4a,
	0xdf, 0x25, 0xd0, 0xc5, 0xca, 0x14, 0x3a, 0x21, 0x33, 0x15, 0x6e, 0x2e, 0x28, 0x93, 0x2d, 0xa4,
	0xa4, 0x91, 0x65, 0xe5, 0x0f, 0x17, 0x4d, 0xff, 0x6d, 0xb6, 0xad, 0x6d, 0xb1, 0x76, 0xc3, 0x36,
	0xdd, 0x02, 0xd8, 0xa9, 0xdd, 0xe9, 0xf9, 0xa6, 0x86, 0xb8, 0x20, 0xce, 0x24, 0x11, 0x45, 0x60,
	0xa7, 0x18, 0xb0, 0x01, 0xda, 0xc7, 0x03, 0xa3, 0xef, 0x13, 0xe8, 0xe5, 0x8a, 0x63, 0xf9, 0x45,
	0x26, 0x2a, 0xe2, 0xe5, 0x17, 0x99, 0xb0, 0xe2, 0x56, 0xcf, 0x31, 0x18, 0xa7, 0xe9, 0x88, 0x94,
	0x1f, 0xfa, 0x11, 0x81, 0x63, 0xa1, 0xc2, 0x93, 0xce, 0xb4, 0xb2, 0xb0, 0xf3, 0x28, 0x96, 0x5f,
	0x0c, 0x82, 0x4a, 0x56, 0x9d, 0x61, 0x58, 0x26, 0xa8, 0xda, 0x3a, 0x56, 0xde, 0x6d, 0xd5, 0x83,
	0x4f, 0x56, 0x2a, 0x7d, 0x3c, 0xf0, 0x15, 0xa9, 0x32, 0xdd, 0x52, 0x0e, 0x81, 0x5c, 0x62, 0x40,
	0x34, 0x3a, 0x17, 0xfd, 0x5b, 0xac, 0x38, 0x6d, 0xfc, 0x32, 0x75, 0x9b, 0xbe, 0x43, 0xe0, 0x78,
	0xb8, 0xd4, 0xa3, 0x17, 0x5a, 0x18, 0xe4, 0x92, 0x67, 0x36, 0x99, 0x30, 0x42, 0x4c, 0x31, 0x88,
	0x94, 0x0e, 0x44, 0x21, 0xd2, 0x4f, 0x08, 0xf4, 0x47, 0x0a, 0x29, 0xf9, 0x01, 0x2a, 0x2e, 0xfa,
	0xe4, 0x07, 0xa8, 0xa4, 0x42, 0x13, 0x5c, 0x3d, 0x71, 0xc6, 0xe8, 0x7d, 0x02, 0xbd, 0x5c, 0x89,
	0x42, 0x67, 0x5b, 0xdb, 0x09, 0x25, 0xd3, 0x5c, 0x42, 0x69, 0xe9, 0xbd, 0xd3, 0x24, 0x8a, 0xf4,
	0x53, 0x02, 0xbd, 0xdc, 0xd3, 0x59, 0x0e, 0x4e, 0x54, 0xc1, 0xc8, 0xc1, 0x09, 0xeb, 0x16, 0x41,
	0xae, 0xf3, 0x2f, 0xfd, 0x30, 0x6f, 0x9f, 0x13, 0xa0, 0xf1, 0x2a, 0x41, 0xfe, 0x72, 0x94, 0x16,
	0x2f, 0xf2, 0x97, 0xa3, 0xbc, 0x08, 0x51, 0x47, 0x19, 0xd2, 0x11, 0x3a, 0x2c, 0x41, 0xba, 0x74,
	0xed, 0xd1, 0x93, 0x34, 0x79, 0xfc, 0x24, 0x4d, 0x7e, 0x7f, 0x92, 0x26, 0x1f, 0x3c, 0x4d, 0x77,
	0x3c, 0x7e, 0x9a, 0xee, 0xf8, 0xf5, 0x69, 0xba, 0xe3, 0x95, 0xb9, 0xb2, 0xe9, 0xde, 0xdc, 0xc8,
	0x67, 0x0a, 0xf6, 0x3a, 0x53, 0x2e, 0xd8, 0xf8, 0x8f, 0x05, 0xfe, 0xbf, 0x18, 0x6c, 0x36, 0x56,
	0x74, 0xeb, 0x55, 0xc3, 0xc9, 0x77, 0xb3, 0x7f, 0x2e, 0xb8, 0xf8, 0x57, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf5, 0xdf, 0xaa, 0xc2, 0x2d, 0x22, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a ClassesByISCN by index.
	ClassesByISCN(ctx context.Context, in *QueryClassesByISCNRequest, opts ...grpc.CallOption) (*QueryClassesByISCNResponse, error)
	// Queries a list of ClassesByISCN items.
	ClassesByISCNIndex(ctx context.Context, in *QueryClassesByISCNIndexRequest, opts ...grpc.CallOption) (*QueryClassesByISCNIndexResponse, error)
	// Queries a list of ISCNByClass items.
	ISCNByClass(ctx context.Context, in *QueryISCNByClassRequest, opts ...grpc.CallOption) (*QueryISCNByClassResponse, error)
	// Queries a ClassesByAccount by index.
	ClassesByAccount(ctx context.Context, in *QueryClassesByAccountRequest, opts ...grpc.CallOption) (*QueryClassesByAccountResponse, error)
	// Queries a list of ClassesByAccount items.
	ClassesByAccountIndex(ctx context.Context, in *QueryClassesByAccountIndexRequest, opts ...grpc.CallOption) (*QueryClassesByAccountIndexResponse, error)
	// Queries a list of AccountByClass items.
	AccountByClass(ctx context.Context, in *QueryAccountByClassRequest, opts ...grpc.CallOption) (*QueryAccountByClassResponse, error)
	// Queries a BlindBoxContent by index.
	BlindBoxContent(ctx context.Context, in *QueryBlindBoxContentRequest, opts ...grpc.CallOption) (*QueryBlindBoxContentResponse, error)
	// Queries a list of BlindBoxContent items.
	BlindBoxContentIndex(ctx context.Context, in *QueryBlindBoxContentIndexRequest, opts ...grpc.CallOption) (*QueryBlindBoxContentIndexResponse, error)
	// Queries a list of BlindBoxContents by class_id
	BlindBoxContents(ctx context.Context, in *QueryBlindBoxContentsRequest, opts ...grpc.CallOption) (*QueryBlindBoxContentsResponse, error)
	// Queries a Offer by index.
	Offer(ctx context.Context, in *QueryOfferRequest, opts ...grpc.CallOption) (*QueryOfferResponse, error)
	// Queries a list of Offer items.
	OfferIndex(ctx context.Context, in *QueryOfferIndexRequest, opts ...grpc.CallOption) (*QueryOfferIndexResponse, error)
	// Queries a list of OffersByClass items.
	OffersByClass(ctx context.Context, in *QueryOffersByClassRequest, opts ...grpc.CallOption) (*QueryOffersByClassResponse, error)
	// Queries a list of OffersByNFT items.
	OffersByNFT(ctx context.Context, in *QueryOffersByNFTRequest, opts ...grpc.CallOption) (*QueryOffersByNFTResponse, error)
	// Queries a Listing by index.
	Listing(ctx context.Context, in *QueryListingRequest, opts ...grpc.CallOption) (*QueryListingResponse, error)
	// Queries a list of Listing items.
	ListingIndex(ctx context.Context, in *QueryListingIndexRequest, opts ...grpc.CallOption) (*QueryListingIndexResponse, error)
	// Queries a list of Listing items by class
	ListingsByClass(ctx context.Context, in *QueryListingsByClassRequest, opts ...grpc.CallOption) (*QueryListingsByClassResponse, error)
	// Queries a list of Listing items by nft
	ListingsByNFT(ctx context.Context, in *QueryListingsByNFTRequest, opts ...grpc.CallOption) (*QueryListingsByNFTResponse, error)
	// Queries a RoyaltyConfig by class
	RoyaltyConfig(ctx context.Context, in *QueryRoyaltyConfigRequest, opts ...grpc.CallOption) (*QueryRoyaltyConfigResponse, error)
	// Queries index of RoyaltyConfig of all classes
	RoyaltyConfigIndex(ctx context.Context, in *QueryRoyaltyConfigIndexRequest, opts ...grpc.CallOption) (*QueryRoyaltyConfigIndexResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassesByISCN(ctx context.Context, in *QueryClassesByISCNRequest, opts ...grpc.CallOption) (*QueryClassesByISCNResponse, error) {
	out := new(QueryClassesByISCNResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ClassesByISCN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassesByISCNIndex(ctx context.Context, in *QueryClassesByISCNIndexRequest, opts ...grpc.CallOption) (*QueryClassesByISCNIndexResponse, error) {
	out := new(QueryClassesByISCNIndexResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ClassesByISCNIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ISCNByClass(ctx context.Context, in *QueryISCNByClassRequest, opts ...grpc.CallOption) (*QueryISCNByClassResponse, error) {
	out := new(QueryISCNByClassResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ISCNByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassesByAccount(ctx context.Context, in *QueryClassesByAccountRequest, opts ...grpc.CallOption) (*QueryClassesByAccountResponse, error) {
	out := new(QueryClassesByAccountResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ClassesByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassesByAccountIndex(ctx context.Context, in *QueryClassesByAccountIndexRequest, opts ...grpc.CallOption) (*QueryClassesByAccountIndexResponse, error) {
	out := new(QueryClassesByAccountIndexResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ClassesByAccountIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountByClass(ctx context.Context, in *QueryAccountByClassRequest, opts ...grpc.CallOption) (*QueryAccountByClassResponse, error) {
	out := new(QueryAccountByClassResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/AccountByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlindBoxContent(ctx context.Context, in *QueryBlindBoxContentRequest, opts ...grpc.CallOption) (*QueryBlindBoxContentResponse, error) {
	out := new(QueryBlindBoxContentResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/BlindBoxContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlindBoxContentIndex(ctx context.Context, in *QueryBlindBoxContentIndexRequest, opts ...grpc.CallOption) (*QueryBlindBoxContentIndexResponse, error) {
	out := new(QueryBlindBoxContentIndexResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/BlindBoxContentIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlindBoxContents(ctx context.Context, in *QueryBlindBoxContentsRequest, opts ...grpc.CallOption) (*QueryBlindBoxContentsResponse, error) {
	out := new(QueryBlindBoxContentsResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/BlindBoxContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Offer(ctx context.Context, in *QueryOfferRequest, opts ...grpc.CallOption) (*QueryOfferResponse, error) {
	out := new(QueryOfferResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/Offer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OfferIndex(ctx context.Context, in *QueryOfferIndexRequest, opts ...grpc.CallOption) (*QueryOfferIndexResponse, error) {
	out := new(QueryOfferIndexResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/OfferIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OffersByClass(ctx context.Context, in *QueryOffersByClassRequest, opts ...grpc.CallOption) (*QueryOffersByClassResponse, error) {
	out := new(QueryOffersByClassResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/OffersByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OffersByNFT(ctx context.Context, in *QueryOffersByNFTRequest, opts ...grpc.CallOption) (*QueryOffersByNFTResponse, error) {
	out := new(QueryOffersByNFTResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/OffersByNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Listing(ctx context.Context, in *QueryListingRequest, opts ...grpc.CallOption) (*QueryListingResponse, error) {
	out := new(QueryListingResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/Listing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingIndex(ctx context.Context, in *QueryListingIndexRequest, opts ...grpc.CallOption) (*QueryListingIndexResponse, error) {
	out := new(QueryListingIndexResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ListingIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingsByClass(ctx context.Context, in *QueryListingsByClassRequest, opts ...grpc.CallOption) (*QueryListingsByClassResponse, error) {
	out := new(QueryListingsByClassResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ListingsByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingsByNFT(ctx context.Context, in *QueryListingsByNFTRequest, opts ...grpc.CallOption) (*QueryListingsByNFTResponse, error) {
	out := new(QueryListingsByNFTResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/ListingsByNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RoyaltyConfig(ctx context.Context, in *QueryRoyaltyConfigRequest, opts ...grpc.CallOption) (*QueryRoyaltyConfigResponse, error) {
	out := new(QueryRoyaltyConfigResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/RoyaltyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RoyaltyConfigIndex(ctx context.Context, in *QueryRoyaltyConfigIndexRequest, opts ...grpc.CallOption) (*QueryRoyaltyConfigIndexResponse, error) {
	out := new(QueryRoyaltyConfigIndexResponse)
	err := c.cc.Invoke(ctx, "/likechain.likenft.Query/RoyaltyConfigIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a ClassesByISCN by index.
	ClassesByISCN(context.Context, *QueryClassesByISCNRequest) (*QueryClassesByISCNResponse, error)
	// Queries a list of ClassesByISCN items.
	ClassesByISCNIndex(context.Context, *QueryClassesByISCNIndexRequest) (*QueryClassesByISCNIndexResponse, error)
	// Queries a list of ISCNByClass items.
	ISCNByClass(context.Context, *QueryISCNByClassRequest) (*QueryISCNByClassResponse, error)
	// Queries a ClassesByAccount by index.
	ClassesByAccount(context.Context, *QueryClassesByAccountRequest) (*QueryClassesByAccountResponse, error)
	// Queries a list of ClassesByAccount items.
	ClassesByAccountIndex(context.Context, *QueryClassesByAccountIndexRequest) (*QueryClassesByAccountIndexResponse, error)
	// Queries a list of AccountByClass items.
	AccountByClass(context.Context, *QueryAccountByClassRequest) (*QueryAccountByClassResponse, error)
	// Queries a BlindBoxContent by index.
	BlindBoxContent(context.Context, *QueryBlindBoxContentRequest) (*QueryBlindBoxContentResponse, error)
	// Queries a list of BlindBoxContent items.
	BlindBoxContentIndex(context.Context, *QueryBlindBoxContentIndexRequest) (*QueryBlindBoxContentIndexResponse, error)
	// Queries a list of BlindBoxContents by class_id
	BlindBoxContents(context.Context, *QueryBlindBoxContentsRequest) (*QueryBlindBoxContentsResponse, error)
	// Queries a Offer by index.
	Offer(context.Context, *QueryOfferRequest) (*QueryOfferResponse, error)
	// Queries a list of Offer items.
	OfferIndex(context.Context, *QueryOfferIndexRequest) (*QueryOfferIndexResponse, error)
	// Queries a list of OffersByClass items.
	OffersByClass(context.Context, *QueryOffersByClassRequest) (*QueryOffersByClassResponse, error)
	// Queries a list of OffersByNFT items.
	OffersByNFT(context.Context, *QueryOffersByNFTRequest) (*QueryOffersByNFTResponse, error)
	// Queries a Listing by index.
	Listing(context.Context, *QueryListingRequest) (*QueryListingResponse, error)
	// Queries a list of Listing items.
	ListingIndex(context.Context, *QueryListingIndexRequest) (*QueryListingIndexResponse, error)
	// Queries a list of Listing items by class
	ListingsByClass(context.Context, *QueryListingsByClassRequest) (*QueryListingsByClassResponse, error)
	// Queries a list of Listing items by nft
	ListingsByNFT(context.Context, *QueryListingsByNFTRequest) (*QueryListingsByNFTResponse, error)
	// Queries a RoyaltyConfig by class
	RoyaltyConfig(context.Context, *QueryRoyaltyConfigRequest) (*QueryRoyaltyConfigResponse, error)
	// Queries index of RoyaltyConfig of all classes
	RoyaltyConfigIndex(context.Context, *QueryRoyaltyConfigIndexRequest) (*QueryRoyaltyConfigIndexResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ClassesByISCN(ctx context.Context, req *QueryClassesByISCNRequest) (*QueryClassesByISCNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassesByISCN not implemented")
}
func (*UnimplementedQueryServer) ClassesByISCNIndex(ctx context.Context, req *QueryClassesByISCNIndexRequest) (*QueryClassesByISCNIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassesByISCNIndex not implemented")
}
func (*UnimplementedQueryServer) ISCNByClass(ctx context.Context, req *QueryISCNByClassRequest) (*QueryISCNByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ISCNByClass not implemented")
}
func (*UnimplementedQueryServer) ClassesByAccount(ctx context.Context, req *QueryClassesByAccountRequest) (*QueryClassesByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassesByAccount not implemented")
}
func (*UnimplementedQueryServer) ClassesByAccountIndex(ctx context.Context, req *QueryClassesByAccountIndexRequest) (*QueryClassesByAccountIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassesByAccountIndex not implemented")
}
func (*UnimplementedQueryServer) AccountByClass(ctx context.Context, req *QueryAccountByClassRequest) (*QueryAccountByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountByClass not implemented")
}
func (*UnimplementedQueryServer) BlindBoxContent(ctx context.Context, req *QueryBlindBoxContentRequest) (*QueryBlindBoxContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxContent not implemented")
}
func (*UnimplementedQueryServer) BlindBoxContentIndex(ctx context.Context, req *QueryBlindBoxContentIndexRequest) (*QueryBlindBoxContentIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxContentIndex not implemented")
}
func (*UnimplementedQueryServer) BlindBoxContents(ctx context.Context, req *QueryBlindBoxContentsRequest) (*QueryBlindBoxContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindBoxContents not implemented")
}
func (*UnimplementedQueryServer) Offer(ctx context.Context, req *QueryOfferRequest) (*QueryOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Offer not implemented")
}
func (*UnimplementedQueryServer) OfferIndex(ctx context.Context, req *QueryOfferIndexRequest) (*QueryOfferIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferIndex not implemented")
}
func (*UnimplementedQueryServer) OffersByClass(ctx context.Context, req *QueryOffersByClassRequest) (*QueryOffersByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffersByClass not implemented")
}
func (*UnimplementedQueryServer) OffersByNFT(ctx context.Context, req *QueryOffersByNFTRequest) (*QueryOffersByNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffersByNFT not implemented")
}
func (*UnimplementedQueryServer) Listing(ctx context.Context, req *QueryListingRequest) (*QueryListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listing not implemented")
}
func (*UnimplementedQueryServer) ListingIndex(ctx context.Context, req *QueryListingIndexRequest) (*QueryListingIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingIndex not implemented")
}
func (*UnimplementedQueryServer) ListingsByClass(ctx context.Context, req *QueryListingsByClassRequest) (*QueryListingsByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingsByClass not implemented")
}
func (*UnimplementedQueryServer) ListingsByNFT(ctx context.Context, req *QueryListingsByNFTRequest) (*QueryListingsByNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingsByNFT not implemented")
}
func (*UnimplementedQueryServer) RoyaltyConfig(ctx context.Context, req *QueryRoyaltyConfigRequest) (*QueryRoyaltyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoyaltyConfig not implemented")
}
func (*UnimplementedQueryServer) RoyaltyConfigIndex(ctx context.Context, req *QueryRoyaltyConfigIndexRequest) (*QueryRoyaltyConfigIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoyaltyConfigIndex not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassesByISCN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassesByISCNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassesByISCN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ClassesByISCN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassesByISCN(ctx, req.(*QueryClassesByISCNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassesByISCNIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassesByISCNIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassesByISCNIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ClassesByISCNIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassesByISCNIndex(ctx, req.(*QueryClassesByISCNIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ISCNByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryISCNByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ISCNByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ISCNByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ISCNByClass(ctx, req.(*QueryISCNByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassesByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassesByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassesByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ClassesByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassesByAccount(ctx, req.(*QueryClassesByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassesByAccountIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClassesByAccountIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassesByAccountIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ClassesByAccountIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassesByAccountIndex(ctx, req.(*QueryClassesByAccountIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/AccountByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountByClass(ctx, req.(*QueryAccountByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlindBoxContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlindBoxContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlindBoxContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/BlindBoxContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlindBoxContent(ctx, req.(*QueryBlindBoxContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlindBoxContentIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlindBoxContentIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlindBoxContentIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/BlindBoxContentIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlindBoxContentIndex(ctx, req.(*QueryBlindBoxContentIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlindBoxContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlindBoxContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlindBoxContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/BlindBoxContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlindBoxContents(ctx, req.(*QueryBlindBoxContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Offer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Offer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/Offer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Offer(ctx, req.(*QueryOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OfferIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOfferIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OfferIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/OfferIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OfferIndex(ctx, req.(*QueryOfferIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OffersByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOffersByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OffersByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/OffersByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OffersByClass(ctx, req.(*QueryOffersByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OffersByNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOffersByNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OffersByNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/OffersByNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OffersByNFT(ctx, req.(*QueryOffersByNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Listing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Listing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/Listing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Listing(ctx, req.(*QueryListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListingIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ListingIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingIndex(ctx, req.(*QueryListingIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingsByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListingsByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingsByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ListingsByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingsByClass(ctx, req.(*QueryListingsByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingsByNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListingsByNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingsByNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/ListingsByNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingsByNFT(ctx, req.(*QueryListingsByNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RoyaltyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoyaltyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RoyaltyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/RoyaltyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RoyaltyConfig(ctx, req.(*QueryRoyaltyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RoyaltyConfigIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoyaltyConfigIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RoyaltyConfigIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.likenft.Query/RoyaltyConfigIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RoyaltyConfigIndex(ctx, req.(*QueryRoyaltyConfigIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "likechain.likenft.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ClassesByISCN",
			Handler:    _Query_ClassesByISCN_Handler,
		},
		{
			MethodName: "ClassesByISCNIndex",
			Handler:    _Query_ClassesByISCNIndex_Handler,
		},
		{
			MethodName: "ISCNByClass",
			Handler:    _Query_ISCNByClass_Handler,
		},
		{
			MethodName: "ClassesByAccount",
			Handler:    _Query_ClassesByAccount_Handler,
		},
		{
			MethodName: "ClassesByAccountIndex",
			Handler:    _Query_ClassesByAccountIndex_Handler,
		},
		{
			MethodName: "AccountByClass",
			Handler:    _Query_AccountByClass_Handler,
		},
		{
			MethodName: "BlindBoxContent",
			Handler:    _Query_BlindBoxContent_Handler,
		},
		{
			MethodName: "BlindBoxContentIndex",
			Handler:    _Query_BlindBoxContentIndex_Handler,
		},
		{
			MethodName: "BlindBoxContents",
			Handler:    _Query_BlindBoxContents_Handler,
		},
		{
			MethodName: "Offer",
			Handler:    _Query_Offer_Handler,
		},
		{
			MethodName: "OfferIndex",
			Handler:    _Query_OfferIndex_Handler,
		},
		{
			MethodName: "OffersByClass",
			Handler:    _Query_OffersByClass_Handler,
		},
		{
			MethodName: "OffersByNFT",
			Handler:    _Query_OffersByNFT_Handler,
		},
		{
			MethodName: "Listing",
			Handler:    _Query_Listing_Handler,
		},
		{
			MethodName: "ListingIndex",
			Handler:    _Query_ListingIndex_Handler,
		},
		{
			MethodName: "ListingsByClass",
			Handler:    _Query_ListingsByClass_Handler,
		},
		{
			MethodName: "ListingsByNFT",
			Handler:    _Query_ListingsByNFT_Handler,
		},
		{
			MethodName: "RoyaltyConfig",
			Handler:    _Query_RoyaltyConfig_Handler,
		},
		{
			MethodName: "RoyaltyConfigIndex",
			Handler:    _Query_RoyaltyConfigIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "likechain/likenft/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryClassesByISCNRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByISCNRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByISCNRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IscnIdPrefix) > 0 {
		i -= len(m.IscnIdPrefix)
		copy(dAtA[i:], m.IscnIdPrefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IscnIdPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByISCNResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByISCNResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByISCNResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Classes) > 0 {
		for iNdEx := len(m.Classes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Classes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IscnIdPrefix) > 0 {
		i -= len(m.IscnIdPrefix)
		copy(dAtA[i:], m.IscnIdPrefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IscnIdPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByISCNIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByISCNIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByISCNIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByISCNIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByISCNIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByISCNIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassesByIscns) > 0 {
		for iNdEx := len(m.ClassesByIscns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassesByIscns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryISCNByClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryISCNByClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryISCNByClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryISCNByClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryISCNByClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryISCNByClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LatestRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LatestVersion != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LatestVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IscnIdPrefix) > 0 {
		i -= len(m.IscnIdPrefix)
		copy(dAtA[i:], m.IscnIdPrefix)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IscnIdPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Classes) > 0 {
		for iNdEx := len(m.Classes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Classes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByAccountIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByAccountIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByAccountIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClassesByAccountIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClassesByAccountIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClassesByAccountIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassesByAccounts) > 0 {
		for iNdEx := len(m.ClassesByAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassesByAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountByClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountByClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountByClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountByClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountByClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountByClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlindBoxContentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlindBoxContentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlindBoxContentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlindBoxContentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlindBoxContentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlindBoxContentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlindBoxContent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBlindBoxContentIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlindBoxContentIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlindBoxContentIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlindBoxContentIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlindBoxContentIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlindBoxContentIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlindBoxContents) > 0 {
		for iNdEx := len(m.BlindBoxContents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlindBoxContents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlindBoxContentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlindBoxContentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlindBoxContentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlindBoxContentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlindBoxContentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlindBoxContentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlindBoxContents) > 0 {
		for iNdEx := len(m.BlindBoxContents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlindBoxContents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOfferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOfferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOfferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOfferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOfferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOfferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOfferIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOfferIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOfferIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOfferIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOfferIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOfferIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOffersByClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOffersByClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOffersByClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOffersByClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOffersByClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOffersByClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOffersByNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOffersByNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOffersByNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOffersByNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOffersByNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOffersByNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Offers) > 0 {
		for iNdEx := len(m.Offers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Listing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListingIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Listings) > 0 {
		for iNdEx := len(m.Listings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingsByClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingsByClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingsByClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingsByClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingsByClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingsByClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Listings) > 0 {
		for iNdEx := len(m.Listings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingsByNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingsByNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingsByNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListingsByNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListingsByNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListingsByNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Listings) > 0 {
		for iNdEx := len(m.Listings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRoyaltyConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoyaltyConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoyaltyConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRoyaltyConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoyaltyConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoyaltyConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RoyaltyConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRoyaltyConfigIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoyaltyConfigIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoyaltyConfigIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRoyaltyConfigIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoyaltyConfigIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoyaltyConfigIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoyaltyConfigByClass) > 0 {
		for iNdEx := len(m.RoyaltyConfigByClass) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoyaltyConfigByClass[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClassesByISCNRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IscnIdPrefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesByISCNResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IscnIdPrefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesByISCNIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesByISCNIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassesByIscns) > 0 {
		for _, e := range m.ClassesByIscns {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryISCNByClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryISCNByClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IscnIdPrefix)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LatestVersion != 0 {
		n += 1 + sovQuery(uint64(m.LatestVersion))
	}
	l = m.LatestRecord.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClassesByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesByAccountIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClassesByAccountIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClassesByAccounts) > 0 {
		for _, e := range m.ClassesByAccounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountByClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountByClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlindBoxContentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlindBoxContentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlindBoxContent.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBlindBoxContentIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlindBoxContentIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlindBoxContents) > 0 {
		for _, e := range m.BlindBoxContents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlindBoxContentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBlindBoxContentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlindBoxContents) > 0 {
		for _, e := range m.BlindBoxContents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOfferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOfferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Offer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOfferIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOfferIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOffersByClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOffersByClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOffersByNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOffersByNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Listing.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListingIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listings) > 0 {
		for _, e := range m.Listings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingsByClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingsByClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listings) > 0 {
		for _, e := range m.Listings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingsByNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListingsByNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listings) > 0 {
		for _, e := range m.Listings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRoyaltyConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRoyaltyConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RoyaltyConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRoyaltyConfigIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRoyaltyConfigIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoyaltyConfigByClass) > 0 {
		for _, e := range m.RoyaltyConfigByClass {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByISCNRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByISCNRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByISCNRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnIdPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnIdPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByISCNResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByISCNResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByISCNResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnIdPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnIdPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, nft.Class{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByISCNIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByISCNIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByISCNIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByISCNIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByISCNIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByISCNIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassesByIscns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassesByIscns = append(m.ClassesByIscns, ClassesByISCN{})
			if err := m.ClassesByIscns[len(m.ClassesByIscns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryISCNByClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryISCNByClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryISCNByClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryISCNByClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryISCNByClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryISCNByClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnIdPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnIdPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVersion", wireType)
			}
			m.LatestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LatestRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, nft.Class{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByAccountIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByAccountIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByAccountIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClassesByAccountIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClassesByAccountIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClassesByAccountIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassesByAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassesByAccounts = append(m.ClassesByAccounts, ClassesByAccount{})
			if err := m.ClassesByAccounts[len(m.ClassesByAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountByClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountByClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountByClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountByClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountByClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountByClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlindBoxContentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlindBoxContentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlindBoxContentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlindBoxContentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlindBoxContentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlindBoxContentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlindBoxContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlindBoxContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlindBoxContentIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlindBoxContentIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlindBoxContentIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlindBoxContentIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlindBoxContentIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlindBoxContentIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlindBoxContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlindBoxContents = append(m.BlindBoxContents, BlindBoxContent{})
			if err := m.BlindBoxContents[len(m.BlindBoxContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlindBoxContentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlindBoxContentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlindBoxContentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlindBoxContentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlindBoxContentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlindBoxContentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlindBoxContents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlindBoxContents = append(m.BlindBoxContents, BlindBoxContent{})
			if err := m.BlindBoxContents[len(m.BlindBoxContents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOfferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOfferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOfferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOfferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOfferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOfferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Offer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOfferIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOfferIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOfferIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOfferIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOfferIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOfferIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, Offer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOffersByClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOffersByClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOffersByClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOffersByClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOffersByClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOffersByClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, Offer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOffersByNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOffersByNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOffersByNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOffersByNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOffersByNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOffersByNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, Offer{})
			if err := m.Offers[len(m.Offers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Listing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listings = append(m.Listings, Listing{})
			if err := m.Listings[len(m.Listings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingsByClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingsByClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingsByClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingsByClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingsByClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingsByClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listings = append(m.Listings, Listing{})
			if err := m.Listings[len(m.Listings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingsByNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingsByNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingsByNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListingsByNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListingsByNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListingsByNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listings = append(m.Listings, Listing{})
			if err := m.Listings[len(m.Listings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoyaltyConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoyaltyConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoyaltyConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoyaltyConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoyaltyConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoyaltyConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoyaltyConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RoyaltyConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoyaltyConfigIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoyaltyConfigIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoyaltyConfigIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoyaltyConfigIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoyaltyConfigIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoyaltyConfigIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoyaltyConfigByClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoyaltyConfigByClass = append(m.RoyaltyConfigByClass, RoyaltyConfigByClass{})
			if err := m.RoyaltyConfigByClass[len(m.RoyaltyConfigByClass)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
