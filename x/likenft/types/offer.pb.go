// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/likenft/offer.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Offer struct {
	ClassId    string    `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId      string    `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Buyer      string    `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Price      uint64    `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Expiration time.Time `protobuf:"bytes,5,opt,name=expiration,proto3,stdtime" json:"expiration"`
}

func (m *Offer) Reset()         { *m = Offer{} }
func (m *Offer) String() string { return proto.CompactTextString(m) }
func (*Offer) ProtoMessage()    {}
func (*Offer) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab7f997be2cdae1, []int{0}
}
func (m *Offer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Offer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Offer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Offer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offer.Merge(m, src)
}
func (m *Offer) XXX_Size() int {
	return m.Size()
}
func (m *Offer) XXX_DiscardUnknown() {
	xxx_messageInfo_Offer.DiscardUnknown(m)
}

var xxx_messageInfo_Offer proto.InternalMessageInfo

func (m *Offer) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *Offer) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *Offer) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Offer) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Offer) GetExpiration() time.Time {
	if m != nil {
		return m.Expiration
	}
	return time.Time{}
}

type OfferStoreRecord struct {
	ClassId    string    `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	NftId      string    `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Buyer      []byte    `protobuf:"bytes,3,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Price      uint64    `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Expiration time.Time `protobuf:"bytes,5,opt,name=expiration,proto3,stdtime" json:"expiration"`
}

func (m *OfferStoreRecord) Reset()         { *m = OfferStoreRecord{} }
func (m *OfferStoreRecord) String() string { return proto.CompactTextString(m) }
func (*OfferStoreRecord) ProtoMessage()    {}
func (*OfferStoreRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ab7f997be2cdae1, []int{1}
}
func (m *OfferStoreRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfferStoreRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfferStoreRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfferStoreRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfferStoreRecord.Merge(m, src)
}
func (m *OfferStoreRecord) XXX_Size() int {
	return m.Size()
}
func (m *OfferStoreRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OfferStoreRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OfferStoreRecord proto.InternalMessageInfo

func (m *OfferStoreRecord) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *OfferStoreRecord) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *OfferStoreRecord) GetBuyer() []byte {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *OfferStoreRecord) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OfferStoreRecord) GetExpiration() time.Time {
	if m != nil {
		return m.Expiration
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Offer)(nil), "likechain.likenft.Offer")
	proto.RegisterType((*OfferStoreRecord)(nil), "likechain.likenft.OfferStoreRecord")
}

func init() { proto.RegisterFile("likechain/likenft/offer.proto", fileDescriptor_7ab7f997be2cdae1) }

var fileDescriptor_7ab7f997be2cdae1 = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x1b, 0x5d, 0xe7, 0x8c, 0x1e, 0xb4, 0x4c, 0xa8, 0x03, 0xb3, 0xb1, 0xd3, 0x2e, 0xa6,
	0xa0, 0x6f, 0x30, 0x04, 0xd9, 0x49, 0xa8, 0x9e, 0xbc, 0x48, 0x9b, 0x26, 0x5d, 0x70, 0xeb, 0x57,
	0xd2, 0x14, 0xb6, 0xb7, 0xd8, 0x7b, 0x78, 0xf7, 0x19, 0x76, 0xdc, 0xd1, 0x93, 0x4a, 0xfb, 0x22,
	0xd2, 0x64, 0x1b, 0xde, 0x05, 0x6f, 0xdf, 0xff, 0xfb, 0x7d, 0x6d, 0x7e, 0xf0, 0xc7, 0x57, 0x33,
	0xf9, 0xca, 0xd9, 0x34, 0x92, 0x59, 0xd0, 0x4c, 0x99, 0xd0, 0x01, 0x08, 0xc1, 0x15, 0xcd, 0x15,
	0x68, 0xf0, 0xce, 0xf7, 0x98, 0x6e, 0x71, 0xaf, 0x9b, 0x42, 0x0a, 0x86, 0x06, 0xcd, 0x64, 0x0f,
	0x7b, 0xfd, 0x14, 0x20, 0x9d, 0xf1, 0xc0, 0xa4, 0xb8, 0x14, 0x81, 0x96, 0x73, 0x5e, 0xe8, 0x68,
	0x9e, 0xdb, 0x83, 0xe1, 0x1b, 0xc2, 0xee, 0x43, 0xf3, 0x67, 0xef, 0x12, 0x77, 0xd8, 0x2c, 0x2a,
	0x8a, 0x17, 0x99, 0xf8, 0x68, 0x80, 0x46, 0xc7, 0xe1, 0x91, 0xc9, 0x93, 0xc4, 0xbb, 0xc0, 0xed,
	0x4c, 0xe8, 0x06, 0x1c, 0x18, 0xe0, 0x66, 0x42, 0x4f, 0x12, 0xaf, 0x8b, 0xdd, 0xb8, 0x5c, 0x72,
	0xe5, 0x1f, 0xda, 0xad, 0x09, 0xcd, 0x36, 0x57, 0x92, 0x71, 0xbf, 0x35, 0x40, 0xa3, 0x56, 0x68,
	0x83, 0x77, 0x87, 0x31, 0x5f, 0xe4, 0x52, 0x45, 0x5a, 0x42, 0xe6, 0xbb, 0x03, 0x34, 0x3a, 0xb9,
	0xe9, 0x51, 0x6b, 0x47, 0x77, 0x76, 0xf4, 0x69, 0x67, 0x37, 0xee, 0xac, 0x3f, 0xfb, 0xce, 0xea,
	0xab, 0x8f, 0xc2, 0x5f, 0xdf, 0x0d, 0xdf, 0x11, 0x3e, 0x33, 0xb6, 0x8f, 0x1a, 0x14, 0x0f, 0x39,
	0x03, 0x95, 0xfc, 0x55, 0xfc, 0xf4, 0x1f, 0xc4, 0xc7, 0xf7, 0xeb, 0x8a, 0xa0, 0x4d, 0x45, 0xd0,
	0x77, 0x45, 0xd0, 0xaa, 0x26, 0xce, 0xa6, 0x26, 0xce, 0x47, 0x4d, 0x9c, 0xe7, 0xeb, 0x54, 0xea,
	0x69, 0x19, 0x53, 0x06, 0x73, 0x53, 0x35, 0x83, 0x6d, 0xe7, 0xb6, 0xfd, 0xc5, 0xbe, 0x7f, 0xbd,
	0xcc, 0x79, 0x11, 0xb7, 0xcd, 0x93, 0xb7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xbf, 0xf9,
	0x2a, 0x21, 0x02, 0x00, 0x00,
}

func (m *Offer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Offer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Offer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOffer(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if m.Price != 0 {
		i = encodeVarintOffer(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintOffer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintOffer(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintOffer(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OfferStoreRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfferStoreRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfferStoreRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintOffer(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if m.Price != 0 {
		i = encodeVarintOffer(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintOffer(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintOffer(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintOffer(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOffer(dAtA []byte, offset int, v uint64) int {
	offset -= sovOffer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Offer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovOffer(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovOffer(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovOffer(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovOffer(uint64(m.Price))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovOffer(uint64(l))
	return n
}

func (m *OfferStoreRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovOffer(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovOffer(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovOffer(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovOffer(uint64(m.Price))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovOffer(uint64(l))
	return n
}

func sovOffer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOffer(x uint64) (n int) {
	return sovOffer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Offer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Offer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Offer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfferStoreRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfferStoreRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfferStoreRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = append(m.Buyer[:0], dAtA[iNdEx:postIndex]...)
			if m.Buyer == nil {
				m.Buyer = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOffer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOffer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOffer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOffer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOffer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOffer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOffer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOffer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOffer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOffer = fmt.Errorf("proto: unexpected end of group")
)
