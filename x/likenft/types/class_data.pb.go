// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likenft/class_data.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClassParentType int32

const (
	ClassParentType_UNKNOWN ClassParentType = 0
	ClassParentType_ISCN    ClassParentType = 1
	ClassParentType_ACCOUNT ClassParentType = 2
)

var ClassParentType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ISCN",
	2: "ACCOUNT",
}

var ClassParentType_value = map[string]int32{
	"UNKNOWN": 0,
	"ISCN":    1,
	"ACCOUNT": 2,
}

func (x ClassParentType) String() string {
	return proto.EnumName(ClassParentType_name, int32(x))
}

func (ClassParentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_084dbaa322495271, []int{0}
}

type ClassData struct {
	Metadata       JsonInput   `protobuf:"bytes,1,opt,name=metadata,proto3,customtype=JsonInput" json:"metadata"`
	Parent         ClassParent `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent"`
	Config         ClassConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config"`
	ClaimableCount uint64      `protobuf:"varint,4,opt,name=claimableCount,proto3" json:"claimableCount,omitempty"`
}

func (m *ClassData) Reset()         { *m = ClassData{} }
func (m *ClassData) String() string { return proto.CompactTextString(m) }
func (*ClassData) ProtoMessage()    {}
func (*ClassData) Descriptor() ([]byte, []int) {
	return fileDescriptor_084dbaa322495271, []int{0}
}
func (m *ClassData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassData.Merge(m, src)
}
func (m *ClassData) XXX_Size() int {
	return m.Size()
}
func (m *ClassData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassData.DiscardUnknown(m)
}

var xxx_messageInfo_ClassData proto.InternalMessageInfo

func (m *ClassData) GetParent() ClassParent {
	if m != nil {
		return m.Parent
	}
	return ClassParent{}
}

func (m *ClassData) GetConfig() ClassConfig {
	if m != nil {
		return m.Config
	}
	return ClassConfig{}
}

func (m *ClassData) GetClaimableCount() uint64 {
	if m != nil {
		return m.ClaimableCount
	}
	return 0
}

type ClassParent struct {
	Type              ClassParentType `protobuf:"varint,1,opt,name=type,proto3,enum=likecoin.likechain.likenft.ClassParentType" json:"type,omitempty"`
	IscnIdPrefix      string          `protobuf:"bytes,2,opt,name=iscnIdPrefix,proto3" json:"iscnIdPrefix,omitempty"`
	IscnVersionAtMint uint64          `protobuf:"varint,3,opt,name=iscnVersionAtMint,proto3" json:"iscnVersionAtMint,omitempty"`
	Account           string          `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *ClassParent) Reset()         { *m = ClassParent{} }
func (m *ClassParent) String() string { return proto.CompactTextString(m) }
func (*ClassParent) ProtoMessage()    {}
func (*ClassParent) Descriptor() ([]byte, []int) {
	return fileDescriptor_084dbaa322495271, []int{1}
}
func (m *ClassParent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassParent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassParent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassParent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassParent.Merge(m, src)
}
func (m *ClassParent) XXX_Size() int {
	return m.Size()
}
func (m *ClassParent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassParent.DiscardUnknown(m)
}

var xxx_messageInfo_ClassParent proto.InternalMessageInfo

func (m *ClassParent) GetType() ClassParentType {
	if m != nil {
		return m.Type
	}
	return ClassParentType_UNKNOWN
}

func (m *ClassParent) GetIscnIdPrefix() string {
	if m != nil {
		return m.IscnIdPrefix
	}
	return ""
}

func (m *ClassParent) GetIscnVersionAtMint() uint64 {
	if m != nil {
		return m.IscnVersionAtMint
	}
	return 0
}

func (m *ClassParent) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type ClaimPeriod struct {
	StartTime        *time.Time `protobuf:"bytes,1,opt,name=startTime,proto3,stdtime" json:"startTime,omitempty"`
	AllowAddressList []string   `protobuf:"bytes,2,rep,name=allowAddressList,proto3" json:"allowAddressList,omitempty"`
	MintPrice        uint64     `protobuf:"varint,3,opt,name=mintPrice,proto3" json:"mintPrice,omitempty"`
}

func (m *ClaimPeriod) Reset()         { *m = ClaimPeriod{} }
func (m *ClaimPeriod) String() string { return proto.CompactTextString(m) }
func (*ClaimPeriod) ProtoMessage()    {}
func (*ClaimPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_084dbaa322495271, []int{2}
}
func (m *ClaimPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimPeriod.Merge(m, src)
}
func (m *ClaimPeriod) XXX_Size() int {
	return m.Size()
}
func (m *ClaimPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimPeriod proto.InternalMessageInfo

func (m *ClaimPeriod) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ClaimPeriod) GetAllowAddressList() []string {
	if m != nil {
		return m.AllowAddressList
	}
	return nil
}

func (m *ClaimPeriod) GetMintPrice() uint64 {
	if m != nil {
		return m.MintPrice
	}
	return 0
}

type ClassConfig struct {
	Burnable        bool           `protobuf:"varint,1,opt,name=burnable,proto3" json:"burnable,omitempty"`
	MaxSupply       uint64         `protobuf:"varint,2,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	EnablePayToMint bool           `protobuf:"varint,3,opt,name=enablePayToMint,proto3" json:"enablePayToMint,omitempty"`
	MintPrice       uint64         `protobuf:"varint,4,opt,name=mintPrice,proto3" json:"mintPrice,omitempty"`
	ClaimPeriods    []*ClaimPeriod `protobuf:"bytes,5,rep,name=claimPeriods,proto3" json:"claimPeriods,omitempty"`
	RevealTime      *time.Time     `protobuf:"bytes,6,opt,name=revealTime,proto3,stdtime" json:"revealTime,omitempty"`
}

func (m *ClassConfig) Reset()         { *m = ClassConfig{} }
func (m *ClassConfig) String() string { return proto.CompactTextString(m) }
func (*ClassConfig) ProtoMessage()    {}
func (*ClassConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_084dbaa322495271, []int{3}
}
func (m *ClassConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassConfig.Merge(m, src)
}
func (m *ClassConfig) XXX_Size() int {
	return m.Size()
}
func (m *ClassConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClassConfig proto.InternalMessageInfo

func (m *ClassConfig) GetBurnable() bool {
	if m != nil {
		return m.Burnable
	}
	return false
}

func (m *ClassConfig) GetMaxSupply() uint64 {
	if m != nil {
		return m.MaxSupply
	}
	return 0
}

func (m *ClassConfig) GetEnablePayToMint() bool {
	if m != nil {
		return m.EnablePayToMint
	}
	return false
}

func (m *ClassConfig) GetMintPrice() uint64 {
	if m != nil {
		return m.MintPrice
	}
	return 0
}

func (m *ClassConfig) GetClaimPeriods() []*ClaimPeriod {
	if m != nil {
		return m.ClaimPeriods
	}
	return nil
}

func (m *ClassConfig) GetRevealTime() *time.Time {
	if m != nil {
		return m.RevealTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("likecoin.likechain.likenft.ClassParentType", ClassParentType_name, ClassParentType_value)
	proto.RegisterType((*ClassData)(nil), "likecoin.likechain.likenft.ClassData")
	proto.RegisterType((*ClassParent)(nil), "likecoin.likechain.likenft.ClassParent")
	proto.RegisterType((*ClaimPeriod)(nil), "likecoin.likechain.likenft.ClaimPeriod")
	proto.RegisterType((*ClassConfig)(nil), "likecoin.likechain.likenft.ClassConfig")
}

func init() { proto.RegisterFile("likenft/class_data.proto", fileDescriptor_084dbaa322495271) }

var fileDescriptor_084dbaa322495271 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xb6, 0xa6, 0x4d, 0x36, 0x55, 0x9b, 0xae, 0x38, 0x58, 0x11, 0x72, 0xa2, 0x1c, 0x20,
	0x02, 0xd5, 0x46, 0x41, 0x5c, 0x81, 0xc6, 0x20, 0x54, 0x7e, 0xd2, 0xe0, 0xa6, 0x20, 0x71, 0x41,
	0x1b, 0x67, 0xe3, 0xae, 0xb0, 0x77, 0x2d, 0xef, 0x1a, 0x9a, 0xb7, 0xe8, 0x0b, 0x70, 0xe3, 0x61,
	0x7a, 0xe0, 0xd0, 0x23, 0xe2, 0x50, 0x50, 0xf3, 0x02, 0x3c, 0x02, 0xda, 0x75, 0xec, 0xa4, 0xa9,
	0x90, 0x72, 0xf3, 0xce, 0x7c, 0xf3, 0xcd, 0x7c, 0xdf, 0x8c, 0x0c, 0xcd, 0x90, 0x7e, 0x26, 0x6c,
	0x2c, 0x1d, 0x3f, 0xc4, 0x42, 0x7c, 0x1a, 0x61, 0x89, 0xed, 0x38, 0xe1, 0x92, 0xa3, 0xba, 0xca,
	0xf8, 0x9c, 0x32, 0x5b, 0x7f, 0x9c, 0xe0, 0xd9, 0x17, 0x1b, 0xcb, 0xfa, 0xed, 0x80, 0x07, 0x5c,
	0xc3, 0x1c, 0xf5, 0x95, 0x55, 0xd4, 0x1b, 0x01, 0xe7, 0x41, 0x48, 0x1c, 0xfd, 0x1a, 0xa6, 0x63,
	0x47, 0xd2, 0x88, 0x08, 0x89, 0xa3, 0x38, 0x03, 0xb4, 0xfe, 0x02, 0x58, 0x71, 0x55, 0x9f, 0xe7,
	0x58, 0x62, 0xb4, 0x07, 0xcb, 0x11, 0x91, 0x58, 0xb5, 0x34, 0x41, 0x13, 0xb4, 0xb7, 0xba, 0xbb,
	0xe7, 0x97, 0x8d, 0xd2, 0xaf, 0xcb, 0x46, 0xe5, 0x95, 0xe0, 0xec, 0x80, 0xc5, 0xa9, 0xf4, 0x0a,
	0x08, 0x7a, 0x01, 0x37, 0x62, 0x9c, 0x10, 0x26, 0xcd, 0xb5, 0x26, 0x68, 0x57, 0x3b, 0xf7, 0xec,
	0xff, 0x0f, 0x68, 0xeb, 0x2e, 0x7d, 0x0d, 0xef, 0x1a, 0x8a, 0xd5, 0x9b, 0x15, 0x2b, 0x1a, 0x9f,
	0xb3, 0x31, 0x0d, 0xcc, 0xf5, 0x15, 0x69, 0x5c, 0x0d, 0xcf, 0x69, 0xb2, 0x62, 0x74, 0x17, 0x6e,
	0xfb, 0x21, 0xa6, 0x11, 0x1e, 0x86, 0xc4, 0xe5, 0x29, 0x93, 0xa6, 0xd1, 0x04, 0x6d, 0xc3, 0x5b,
	0x8a, 0xb6, 0x7e, 0x00, 0x58, 0x5d, 0x18, 0x06, 0x3d, 0x85, 0x86, 0x9c, 0xc4, 0x44, 0x0b, 0xde,
	0xee, 0x3c, 0x58, 0x51, 0xc3, 0x60, 0x12, 0x13, 0x4f, 0x17, 0xa2, 0x36, 0xdc, 0xa2, 0xc2, 0x67,
	0x07, 0xa3, 0x7e, 0x42, 0xc6, 0xf4, 0x54, 0x9b, 0x51, 0xd1, 0xc3, 0x01, 0xef, 0x5a, 0x06, 0x75,
	0xe0, 0xae, 0x7a, 0xbf, 0x27, 0x89, 0xa0, 0x9c, 0xed, 0xcb, 0xb7, 0x94, 0x49, 0x2d, 0xda, 0x98,
	0xc1, 0x6f, 0xa6, 0x91, 0x05, 0x37, 0xb1, 0xef, 0x17, 0x7a, 0x72, 0xe2, 0x3c, 0xd8, 0xfa, 0x96,
	0xc9, 0xa1, 0x51, 0x9f, 0x24, 0x94, 0x8f, 0xd0, 0x13, 0x58, 0x11, 0x12, 0x27, 0x72, 0x40, 0xa3,
	0x4c, 0x53, 0xb5, 0x53, 0xb7, 0xb3, 0x33, 0xb0, 0xf3, 0x33, 0xb0, 0x07, 0xf9, 0x19, 0x74, 0x8d,
	0xb3, 0xdf, 0x0d, 0xe0, 0xcd, 0x4b, 0xd0, 0x43, 0x58, 0xc3, 0x61, 0xc8, 0xbf, 0xee, 0x8f, 0x46,
	0x09, 0x11, 0xe2, 0x0d, 0x15, 0x6a, 0xbd, 0xeb, 0x45, 0xe3, 0x1b, 0x59, 0x74, 0x07, 0x56, 0x22,
	0xca, 0x64, 0x3f, 0xa1, 0x3e, 0xc9, 0xd4, 0x78, 0xf3, 0x40, 0xeb, 0xfb, 0xda, 0xcc, 0xee, 0x6c,
	0x69, 0xa8, 0x0e, 0xcb, 0xc3, 0x34, 0x61, 0x6a, 0x1f, 0x7a, 0xbc, 0xb2, 0x57, 0xbc, 0x35, 0x13,
	0x3e, 0x3d, 0x4a, 0xe3, 0x38, 0x9c, 0x68, 0x1b, 0x15, 0x53, 0x1e, 0x40, 0x6d, 0xb8, 0x43, 0x34,
	0xae, 0x8f, 0x27, 0x03, 0x5e, 0x78, 0x57, 0xf6, 0x96, 0xc3, 0xd7, 0x27, 0x32, 0x96, 0x26, 0x42,
	0xef, 0xe0, 0x96, 0x3f, 0x37, 0x4c, 0x98, 0xb7, 0x9a, 0xeb, 0x2b, 0x5c, 0x5d, 0x8e, 0xcf, 0x17,
	0xbb, 0x48, 0x81, 0x9e, 0x41, 0x98, 0x90, 0x2f, 0x04, 0x87, 0xda, 0xf5, 0x8d, 0x15, 0x5d, 0x5f,
	0xa8, 0xb9, 0xff, 0x18, 0xee, 0x2c, 0x5d, 0x17, 0xaa, 0xc2, 0xcd, 0xe3, 0xde, 0xeb, 0xde, 0xe1,
	0x87, 0x5e, 0xad, 0x84, 0xca, 0xd0, 0x38, 0x38, 0x72, 0x7b, 0x35, 0xa0, 0xc2, 0xfb, 0xae, 0x7b,
	0x78, 0xdc, 0x1b, 0xd4, 0xd6, 0xba, 0x2f, 0xcf, 0xaf, 0x2c, 0x70, 0x71, 0x65, 0x81, 0x3f, 0x57,
	0x16, 0x38, 0x9b, 0x5a, 0xa5, 0x8b, 0xa9, 0x55, 0xfa, 0x39, 0xb5, 0x4a, 0x1f, 0xf7, 0x02, 0x2a,
	0x4f, 0xd2, 0xa1, 0xed, 0xf3, 0xc8, 0xc9, 0x95, 0x39, 0x85, 0x32, 0xe7, 0xd4, 0xc9, 0x7f, 0x33,
	0xea, 0x86, 0xc5, 0x70, 0x43, 0x4f, 0xf9, 0xe8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x15,
	0x20, 0xf3, 0x7e, 0x04, 0x00, 0x00,
}

func (m *ClassData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimableCount != 0 {
		i = encodeVarintClassData(dAtA, i, uint64(m.ClaimableCount))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClassData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Parent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClassData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Metadata.Size()
		i -= size
		if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintClassData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClassParent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassParent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassParent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintClassData(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x22
	}
	if m.IscnVersionAtMint != 0 {
		i = encodeVarintClassData(dAtA, i, uint64(m.IscnVersionAtMint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.IscnIdPrefix) > 0 {
		i -= len(m.IscnIdPrefix)
		copy(dAtA[i:], m.IscnIdPrefix)
		i = encodeVarintClassData(dAtA, i, uint64(len(m.IscnIdPrefix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintClassData(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintPrice != 0 {
		i = encodeVarintClassData(dAtA, i, uint64(m.MintPrice))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AllowAddressList) > 0 {
		for iNdEx := len(m.AllowAddressList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowAddressList[iNdEx])
			copy(dAtA[i:], m.AllowAddressList[iNdEx])
			i = encodeVarintClassData(dAtA, i, uint64(len(m.AllowAddressList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.StartTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintClassData(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevealTime != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.RevealTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.RevealTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintClassData(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClaimPeriods) > 0 {
		for iNdEx := len(m.ClaimPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClassData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.MintPrice != 0 {
		i = encodeVarintClassData(dAtA, i, uint64(m.MintPrice))
		i--
		dAtA[i] = 0x20
	}
	if m.EnablePayToMint {
		i--
		if m.EnablePayToMint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MaxSupply != 0 {
		i = encodeVarintClassData(dAtA, i, uint64(m.MaxSupply))
		i--
		dAtA[i] = 0x10
	}
	if m.Burnable {
		i--
		if m.Burnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintClassData(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovClassData(uint64(l))
	l = m.Parent.Size()
	n += 1 + l + sovClassData(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovClassData(uint64(l))
	if m.ClaimableCount != 0 {
		n += 1 + sovClassData(uint64(m.ClaimableCount))
	}
	return n
}

func (m *ClassParent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovClassData(uint64(m.Type))
	}
	l = len(m.IscnIdPrefix)
	if l > 0 {
		n += 1 + l + sovClassData(uint64(l))
	}
	if m.IscnVersionAtMint != 0 {
		n += 1 + sovClassData(uint64(m.IscnVersionAtMint))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovClassData(uint64(l))
	}
	return n
}

func (m *ClaimPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovClassData(uint64(l))
	}
	if len(m.AllowAddressList) > 0 {
		for _, s := range m.AllowAddressList {
			l = len(s)
			n += 1 + l + sovClassData(uint64(l))
		}
	}
	if m.MintPrice != 0 {
		n += 1 + sovClassData(uint64(m.MintPrice))
	}
	return n
}

func (m *ClassConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Burnable {
		n += 2
	}
	if m.MaxSupply != 0 {
		n += 1 + sovClassData(uint64(m.MaxSupply))
	}
	if m.EnablePayToMint {
		n += 2
	}
	if m.MintPrice != 0 {
		n += 1 + sovClassData(uint64(m.MintPrice))
	}
	if len(m.ClaimPeriods) > 0 {
		for _, e := range m.ClaimPeriods {
			l = e.Size()
			n += 1 + l + sovClassData(uint64(l))
		}
	}
	if m.RevealTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.RevealTime)
		n += 1 + l + sovClassData(uint64(l))
	}
	return n
}

func sovClassData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassData(x uint64) (n int) {
	return sovClassData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableCount", wireType)
			}
			m.ClaimableCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimableCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClassData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassParent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassParent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassParent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ClassParentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnIdPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnIdPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnVersionAtMint", wireType)
			}
			m.IscnVersionAtMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IscnVersionAtMint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAddressList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowAddressList = append(m.AllowAddressList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintPrice", wireType)
			}
			m.MintPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClassData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Burnable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			m.MaxSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnablePayToMint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnablePayToMint = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintPrice", wireType)
			}
			m.MintPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimPeriods = append(m.ClaimPeriods, &ClaimPeriod{})
			if err := m.ClaimPeriods[len(m.ClaimPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClassData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClassData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RevealTime == nil {
				m.RevealTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.RevealTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassData = fmt.Errorf("proto: unexpected end of group")
)
