// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likenft/classes_by_account.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClassesByAccount struct {
	Account  string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	ClassIds []string `protobuf:"bytes,2,rep,name=classIds,proto3" json:"classIds,omitempty"`
}

func (m *ClassesByAccount) Reset()         { *m = ClassesByAccount{} }
func (m *ClassesByAccount) String() string { return proto.CompactTextString(m) }
func (*ClassesByAccount) ProtoMessage()    {}
func (*ClassesByAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2209b77ae4c2e9d, []int{0}
}
func (m *ClassesByAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassesByAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassesByAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassesByAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassesByAccount.Merge(m, src)
}
func (m *ClassesByAccount) XXX_Size() int {
	return m.Size()
}
func (m *ClassesByAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassesByAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ClassesByAccount proto.InternalMessageInfo

func (m *ClassesByAccount) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ClassesByAccount) GetClassIds() []string {
	if m != nil {
		return m.ClassIds
	}
	return nil
}

type ClassesByAccountStoreRecord struct {
	AccAddress []byte   `protobuf:"bytes,1,opt,name=accAddress,proto3" json:"accAddress,omitempty"`
	ClassIds   []string `protobuf:"bytes,2,rep,name=classIds,proto3" json:"classIds,omitempty"`
}

func (m *ClassesByAccountStoreRecord) Reset()         { *m = ClassesByAccountStoreRecord{} }
func (m *ClassesByAccountStoreRecord) String() string { return proto.CompactTextString(m) }
func (*ClassesByAccountStoreRecord) ProtoMessage()    {}
func (*ClassesByAccountStoreRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2209b77ae4c2e9d, []int{1}
}
func (m *ClassesByAccountStoreRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassesByAccountStoreRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassesByAccountStoreRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassesByAccountStoreRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassesByAccountStoreRecord.Merge(m, src)
}
func (m *ClassesByAccountStoreRecord) XXX_Size() int {
	return m.Size()
}
func (m *ClassesByAccountStoreRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassesByAccountStoreRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ClassesByAccountStoreRecord proto.InternalMessageInfo

func (m *ClassesByAccountStoreRecord) GetAccAddress() []byte {
	if m != nil {
		return m.AccAddress
	}
	return nil
}

func (m *ClassesByAccountStoreRecord) GetClassIds() []string {
	if m != nil {
		return m.ClassIds
	}
	return nil
}

func init() {
	proto.RegisterType((*ClassesByAccount)(nil), "likecoin.likechain.likenft.ClassesByAccount")
	proto.RegisterType((*ClassesByAccountStoreRecord)(nil), "likecoin.likechain.likenft.ClassesByAccountStoreRecord")
}

func init() { proto.RegisterFile("likenft/classes_by_account.proto", fileDescriptor_b2209b77ae4c2e9d) }

var fileDescriptor_b2209b77ae4c2e9d = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0xc9, 0xcc, 0x4e,
	0xcd, 0x4b, 0x2b, 0xd1, 0x4f, 0xce, 0x49, 0x2c, 0x2e, 0x4e, 0x2d, 0x8e, 0x4f, 0xaa, 0x8c, 0x4f,
	0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x02, 0xa9,
	0x48, 0xce, 0xcf, 0xcc, 0xd3, 0x03, 0x33, 0x32, 0x12, 0xa1, 0xac, 0xbc, 0xb4, 0x12, 0x25, 0x0f,
	0x2e, 0x01, 0x67, 0x88, 0x3e, 0xa7, 0x4a, 0x47, 0x88, 0x2e, 0x21, 0x09, 0x2e, 0x76, 0xa8, 0x01,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x90, 0x14, 0x17, 0x07, 0xd8, 0x16, 0xcf,
	0x94, 0x62, 0x09, 0x26, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x38, 0x5f, 0x29, 0x92, 0x4b, 0x1a, 0xdd,
	0xa4, 0xe0, 0x92, 0xfc, 0xa2, 0xd4, 0xa0, 0xd4, 0xe4, 0xfc, 0xa2, 0x14, 0x21, 0x39, 0x2e, 0xae,
	0xc4, 0xe4, 0x64, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0xb0, 0xb9, 0x3c, 0x41, 0x48, 0x22,
	0xf8, 0x8c, 0x76, 0x72, 0x3f, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xdd,
	0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x98, 0x2f, 0xf5, 0xe1, 0xbe,
	0xd4, 0xaf, 0xd0, 0x87, 0x05, 0x4e, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0x40, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x7a, 0x39, 0x92, 0x34, 0x01, 0x00, 0x00,
}

func (m *ClassesByAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassesByAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassesByAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassIds) > 0 {
		for iNdEx := len(m.ClassIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClassIds[iNdEx])
			copy(dAtA[i:], m.ClassIds[iNdEx])
			i = encodeVarintClassesByAccount(dAtA, i, uint64(len(m.ClassIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintClassesByAccount(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassesByAccountStoreRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassesByAccountStoreRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassesByAccountStoreRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassIds) > 0 {
		for iNdEx := len(m.ClassIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClassIds[iNdEx])
			copy(dAtA[i:], m.ClassIds[iNdEx])
			i = encodeVarintClassesByAccount(dAtA, i, uint64(len(m.ClassIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccAddress) > 0 {
		i -= len(m.AccAddress)
		copy(dAtA[i:], m.AccAddress)
		i = encodeVarintClassesByAccount(dAtA, i, uint64(len(m.AccAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClassesByAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovClassesByAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClassesByAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovClassesByAccount(uint64(l))
	}
	if len(m.ClassIds) > 0 {
		for _, s := range m.ClassIds {
			l = len(s)
			n += 1 + l + sovClassesByAccount(uint64(l))
		}
	}
	return n
}

func (m *ClassesByAccountStoreRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccAddress)
	if l > 0 {
		n += 1 + l + sovClassesByAccount(uint64(l))
	}
	if len(m.ClassIds) > 0 {
		for _, s := range m.ClassIds {
			l = len(s)
			n += 1 + l + sovClassesByAccount(uint64(l))
		}
	}
	return n
}

func sovClassesByAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClassesByAccount(x uint64) (n int) {
	return sovClassesByAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClassesByAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassesByAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassesByAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassesByAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassesByAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassesByAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassIds = append(m.ClassIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassesByAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassesByAccountStoreRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClassesByAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassesByAccountStoreRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassesByAccountStoreRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassesByAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddress = append(m.AccAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AccAddress == nil {
				m.AccAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClassesByAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassIds = append(m.ClassIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClassesByAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClassesByAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClassesByAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClassesByAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassesByAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClassesByAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClassesByAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClassesByAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClassesByAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClassesByAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClassesByAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClassesByAccount = fmt.Errorf("proto: unexpected end of group")
)
