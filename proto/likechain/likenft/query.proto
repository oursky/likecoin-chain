syntax = "proto3";

package likechain.likenft;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/nft/v1beta1/nft.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "likechain/iscn/query.proto";
import "likechain/likenft/classes_by_account.proto";
import "likechain/likenft/classes_by_iscn.proto";
import "likechain/likenft/mintable_nft.proto";
// this line is used by starport scaffolding # 1

import "likechain/likenft/params.proto";

option go_package = "github.com/likecoin/likechain/x/likenft/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/likenft/params";
  }
  // Queries a ClassesByISCN by index.
  rpc ClassesByISCN(QueryClassesByISCNRequest) returns (QueryClassesByISCNResponse) {
    option (google.api.http).get = "/likenft/classes_by_iscn/{iscn_id_prefix}";
  }

  // Queries a list of ClassesByISCN items.
  rpc ClassesByISCNIndex(QueryClassesByISCNIndexRequest) returns (QueryClassesByISCNIndexResponse) {
    option (google.api.http).get = "/likenft/classes_by_iscn";
  }

  // Queries a list of ISCNByClass items.
  rpc ISCNByClass(QueryISCNByClassRequest) returns (QueryISCNByClassResponse) {
    option (google.api.http).get = "/likenft/iscn_by_class/{class_id}";
  }

  // Queries a ClassesByAccount by index.
  rpc ClassesByAccount(QueryClassesByAccountRequest) returns (QueryClassesByAccountResponse) {
    option (google.api.http).get = "/likenft/classes_by_account/{account}";
  }

  // Queries a list of ClassesByAccount items.
  rpc ClassesByAccountIndex(QueryClassesByAccountIndexRequest) returns (QueryClassesByAccountIndexResponse) {
    option (google.api.http).get = "/likenft/classes_by_account";
  }

  // Queries a list of AccountByClass items.
  rpc AccountByClass(QueryAccountByClassRequest) returns (QueryAccountByClassResponse) {
    option (google.api.http).get = "/likenft/account_by_class/{class_id}";
  }

  // Queries a MintableNFT by index.
  rpc MintableNFT(QueryMintableNFTRequest) returns (QueryMintableNFTResponse) {
    option (google.api.http).get = "/likenft/mintable_nft/{class_id}/{id}";
  }

  // Queries a list of MintableNFT items.
  rpc MintableNFTIndex(QueryMintableNFTIndexRequest) returns (QueryMintableNFTIndexResponse) {
    option (google.api.http).get = "/likenft/mintable_nft";
  }

  // Queries a list of MintableNFTs by class_id
  rpc MintableNFTs(QueryMintableNFTsRequest) returns (QueryMintableNFTsResponse) {
    option (google.api.http).get = "/likenft/mintable_nft/{class_id}";
  }

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryClassesByISCNRequest {
  string iscn_id_prefix = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryClassesByISCNResponse {
  string iscn_id_prefix = 1;
  repeated cosmos.nft.v1beta1.Class classes = 2 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryClassesByISCNIndexRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryClassesByISCNIndexResponse {
  repeated ClassesByISCN classes_by_iscns = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryISCNByClassRequest {
  string class_id = 1;
}

message QueryISCNByClassResponse {
  string iscn_id_prefix = 1;
  string owner = 2;
  uint64 latest_version = 3;
  likechain.iscn.QueryResponseRecord latest_record = 4 [(gogoproto.nullable) = false];
}

message QueryClassesByAccountRequest {
  string account = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryClassesByAccountResponse {
  string account = 1;
  repeated cosmos.nft.v1beta1.Class classes = 2 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryClassesByAccountIndexRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryClassesByAccountIndexResponse {
  repeated ClassesByAccount classes_by_accounts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAccountByClassRequest {
  string class_id = 1;
}

message QueryAccountByClassResponse {
  string address = 1;
}

message QueryMintableNFTRequest {
  string class_id = 1;
  string id = 2;
}

message QueryMintableNFTResponse {
  MintableNFT mintable_nft = 1 [(gogoproto.nullable) = false];
}

message QueryMintableNFTIndexRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryMintableNFTIndexResponse {
  repeated MintableNFT mintable_nfts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMintableNFTsRequest {
  string class_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryMintableNFTsResponse {
  repeated MintableNFT mintable_nfts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
