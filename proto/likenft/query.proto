syntax = "proto3";
package likecoin.likechain.likenft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "likenft/params.proto";
import "likenft/classes_by_iscn.proto";
import "cosmos/nft/v1beta1/nft.proto";
import "likenft/classes_by_account.proto";
import "likenft/claimable_nft.proto";
// this line is used by starport scaffolding # 1

import "iscn/query.proto";

option go_package = "github.com/likecoin/likechain/x/likenft/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/likecoin/likechain/likenft/params";
  }
  // Queries a ClassesByISCN by index.
  rpc ClassesByISCN(QueryClassesByISCNRequest) returns (QueryClassesByISCNResponse) {
    option (google.api.http).get = "/likecoin/likechain/likenft/classes_by_iscn/{iscnIdPrefix}";
  }

  // Queries a list of ClassesByISCN items.
  rpc ClassesByISCNIndex(QueryClassesByISCNIndexRequest) returns (QueryClassesByISCNIndexResponse) {
    option (google.api.http).get = "/likecoin/likechain/likenft/classes_by_iscn";
  }

// Queries a list of ISCNByClass items.
  rpc ISCNByClass(QueryISCNByClassRequest) returns (QueryISCNByClassResponse) {
    option (google.api.http).get = "/likecoin/likechain/likenft/iscn_by_class/{classId}";
  }

// Queries a ClassesByAccount by index.
	rpc ClassesByAccount(QueryClassesByAccountRequest) returns (QueryClassesByAccountResponse) {
		option (google.api.http).get = "/likecoin/likechain/likenft/classes_by_account/{account}";
	}

	// Queries a list of ClassesByAccount items.
	rpc ClassesByAccountIndex(QueryClassesByAccountIndexRequest) returns (QueryClassesByAccountIndexResponse) {
		option (google.api.http).get = "/likecoin/likechain/likenft/classes_by_account";
	}

// Queries a list of AccountByClass items.
	rpc AccountByClass(QueryAccountByClassRequest) returns (QueryAccountByClassResponse) {
		option (google.api.http).get = "/likecoin/likechain/likenft/account_by_class/{classId}";
	}

// Queries a ClaimableNFT by index.
	rpc ClaimableNFT(QueryClaimableNFTRequest) returns (QueryClaimableNFTResponse) {
		option (google.api.http).get = "/likecoin/likechain/likenft/claimable_nft/{classId}/{id}";
	}

	// Queries a list of ClaimableNFT items.
	rpc ClaimableNFTIndex(QueryClaimableNFTIndexRequest) returns (QueryClaimableNFTIndexResponse) {
		option (google.api.http).get = "/likecoin/likechain/likenft/claimable_nft";
	}

// Queries a list of ClaimableNFTs by classId
	rpc ClaimableNFTs(QueryClaimableNFTsRequest) returns (QueryClaimableNFTsResponse) {
		option (google.api.http).get = "/likecoin/likechain/likenft/claimable_nft/{classId}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryClassesByISCNRequest {
  string iscnIdPrefix = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryClassesByISCNResponse {
  string iscnIdPrefix = 1;
  repeated cosmos.nft.v1beta1.Class classes = 2 [(gogoproto.nullable) = false]; 
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryClassesByISCNIndexRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryClassesByISCNIndexResponse {
  repeated ClassesByISCN classesByISCN = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryISCNByClassRequest {
  string classId = 1;
}

message QueryISCNByClassResponse {
  string iscnIdPrefix = 1;
  string owner = 2;
  uint64 latestVersion = 3;
  .likechain.iscn.QueryResponseRecord latestRecord = 4 [(gogoproto.nullable) = false];
}

message QueryClassesByAccountRequest {
  string account = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryClassesByAccountResponse {
  string account = 1;
  repeated cosmos.nft.v1beta1.Class classes = 2 [(gogoproto.nullable) = false]; 
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryClassesByAccountIndexRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryClassesByAccountIndexResponse {
	repeated ClassesByAccount classesByAccount = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAccountByClassRequest {
  string classId = 1;
}

message QueryAccountByClassResponse {
  string address = 1;
}

message QueryClaimableNFTRequest {
	string classId = 1;
  string id = 2;

}

message QueryClaimableNFTResponse {
	ClaimableNFT claimableNFT = 1 [(gogoproto.nullable) = false];
}

message QueryClaimableNFTIndexRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryClaimableNFTIndexResponse {
	repeated ClaimableNFT claimableNFT = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryClaimableNFTsRequest {
  string classId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryClaimableNFTsResponse {
  repeated ClaimableNFT claimableNFTs = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
